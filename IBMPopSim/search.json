[{"path":"https://daphnegiorgi.github.io/IBMPopSim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Daphné Giorgi, Sarah Kakaai Vincent Lemaire Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"brief-overview-of-individual-based-models-ibms","dir":"Articles","previous_headings":"","what":"Brief overview of Individual-Based-Models (IBMs)","title":"IBMPopSim package description","text":"Stochastic Individual-Based Models (IBMs) represent broad class random population dynamics models, allowing description population evolution microscopic scale. Informally, IBM can summarized description individuals constituting population, various types events can occur individuals, along respective frequencies. Let us start brief description class IBMs can simulated using IBMPopSim.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"Pop","dir":"Articles","previous_headings":"1 Brief overview of Individual-Based-Models (IBMs)","what":"Individuals and population","title":"IBMPopSim package description","text":"First, individuals can characterized age /collection discrete continuous characteristics (position, subgroup, size, habits, …). Formally, individual represented triplet \\(= (\\tau^b, \\tau^d, x)\\) : \\(\\tau^b \\\\mathbb R\\) date birth, \\((t) =t-\\tau^b\\) age individual time \\(t\\). \\(\\tau^d \\\\bar{\\mathbb R}\\) death date, \\(\\tau^d = \\infty\\) individual still alive, vector \\(x\\) characteristics. population given time \\(t\\) set \\[Z_t=\\{ I_k  ; \\; k= 1,\\dots, N_t\\},\\] composed individuals (alive dead) lived population time \\(t\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"eventsTh","dir":"Articles","previous_headings":"1 Brief overview of Individual-Based-Models (IBMs)","what":"Events type","title":"IBMPopSim package description","text":"package enables users simulate populations one five following event types may occur: Birth event: addition individual age 0 population. Death event: removal individual population. Entry event: arrival individual population. Exit (emigration) event: exit population (death). Swap event: individual changes characteristics. event type associated event kernel, describing population modified following occurrence event. event types, event kernel requires explicit specification. example, case new individual entering population (entry event), model must define age characteristics new individual chosen. instance, characteristics new individual population can chosen uniformly space characteristics, can depend distribution parents individuals composing population.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"Eventintensityth","dir":"Articles","previous_headings":"1 Brief overview of Individual-Based-Models (IBMs)","what":"Intensity classes","title":"IBMPopSim package description","text":"Finally, different types events defined, remains describe frequently events can occur population. Informally, event intensity function \\(\\lambda^e_t(, Z_t)\\) describing frequency event \\(e\\) can occur individual \\(\\), living population \\(Z_t\\) time \\(t\\). Given history population \\((\\mathcal{F}_t)\\), probability event \\(e\\) occurring individual \\(\\) small interval time \\((t,t+dt]\\) proportional \\(\\lambda^e(,t)\\): \\[\\begin{equation}   \\mathbb{P}(\\text{event } e \\text{ occurring $$ } (t,t+dt] | \\mathcal{F}_t) \\simeq \\lambda^e_t(, Z_t)dt. \\end{equation}\\] intensity function \\(\\lambda^e\\) can include dependency individual’s \\(\\) age \\((t)\\) characteristics \\(x\\), time \\(t\\), population composition \\(Z\\). dependence \\(\\lambda^e\\) population \\(Z\\) models interactions individuals populations. Hence, two types intensity functions can implemented IBMPopSim: interactions (individual intensity): intensity function \\(\\lambda^e\\) depend population composition. intensity event type \\(e\\) occur individual \\(\\) depends date birth characteristics: \\[\\begin{equation} \\tag{1.1} \\lambda^e_t (,Z_t) = \\lambda^e(t, ), \\end{equation}\\] \\(\\lambda^e: \\mathbb{R}_+ \\times \\mathcal{} \\\\mathbb{R}^+\\) deterministic function. ``Quadratic’’ interactions: intensity event type \\(e\\) occur individual \\(\\) depends \\(\\) population composition, interaction function \\(W^e\\). quantity \\(W^e(t, ,J)\\) describes intensity interactions two alive individuals \\(\\) \\(J\\) time \\(t\\), instance presence competition cooperation. case, \\[\\begin{equation} \\tag{1.2} \\lambda^e_t(,Z_t)=\\sum_{j \\Z_t} W^e(t, , J). \\end{equation}\\] See vignette('IBMPopSim_interaction') example intensity interaction (associated death event) without interactions (associated birth event). Events intensity bounds order simulate population evolution thinning various events intensities \\(\\lambda^e_t(,Z_t)\\): interactions (individual intensity): individual event intensity \\(\\lambda^e\\) interactions, defined (1.1), assumed uniformly bounded: \\[\\begin{equation} \\tag{1.3} \\lambda^e(t, ) \\leq \\bar \\lambda^e. \\end{equation}\\] ``Quadratic’’ interactions: interaction function \\(W^e\\), defined (1.2), assumed uniformly bounded: \\[\\begin{equation} \\tag{1.4} W^e(t, , J) \\leq \\bar W^e. \\end{equation}\\] IBMPopSim, events can also occur population global intensity Poisson type \\((\\mu^e_t)_{t \\geq 0 }\\), depend individuals population composition, assumed bounded constant \\(\\bar \\mu^e\\). can case instance model arrivals population constant rate.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"algo","dir":"Articles","previous_headings":"1 Brief overview of Individual-Based-Models (IBMs)","what":"Simulation algorithm","title":"IBMPopSim package description","text":"IBM simulation algorithm based acceptance-rejection method simulating random times called thinning, described details (Giorgi, Kaakai, Lemaire 2023), generalizing algorithm proposed (Fournier Méléard 2004) (see also (Ferrière Tran 2009), (Boumezoued 2016)). algorithm based exponential ``candidate” event times. Starting time \\(t\\), candidate event time \\(t + \\bar T_\\ell\\) proposed, candidate event type \\(e\\) (birth, death,…) chosen probability \\(p^e\\) depending event intensity bounds \\(\\bar \\lambda^e\\) \\(\\bar W^e\\). individual \\(\\) drawn population. Finally, remains accept reject candidate event probability \\(q^e(t,,Z_t)\\) depending true event intensity. candidate event time accepted, event \\(e\\) occurs time \\(t + \\bar T_\\ell\\) individual \\(\\). main steps algorithm can summarized follows: Draw candidate time \\(t + \\bar T_\\ell\\) candidate event type \\(e\\). Draw uniform variable \\(\\theta \\sim \\mathcal{U}([0, 1])\\) individual \\(\\). \\(\\theta \\leq q^e(t,,Z_t)\\) event \\(e\\) occur individual \\(\\), else nothing start \\(t + \\bar T_\\ell\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"package-description","dir":"Articles","previous_headings":"","what":"Package description","title":"IBMPopSim package description","text":"can now detail construction simulation IBM using package. implementation IBM model based building blocks, easy manipulate. code efficiency, user shall write lines C++ code define events intensity kernel. code concatenated internal code package result compiled internally using Rcpp package. produced model usually fast can multithreaded. Furthermore, parameters model can modified call another without recompile code.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"installation","dir":"Articles","previous_headings":"2 Package description","what":"Installation","title":"IBMPopSim package description","text":"latest stable version can installed CRAN: latest development version can installed github: First example check installation illustrate use package check installation, simple model Poisson arrivals exits implemented. Starting initial population pop, define two events birth death intensity Poisson type, create model birth_death simulate population evolution 10 years. Let’s now take closer look component model IBMPopSim, starting population.","code":"install.packages('IBMPopSim') # install.packages(\"devtools\") devtools::install_github('DaphneGiorgi/IBMPopSim') library(IBMPopSim)  init_size <- 100000 pop_init <- population(data.frame(birth = rep(0, init_size), death = NA))  birth = mk_event_poisson(type = 'birth', intensity = 'lambda') death = mk_event_poisson(type = 'death', intensity = 'mu') params = list('lambda' = 100, 'mu' = 100)  # mk_model compiles C++ code using sourceCpp from Rcpp birth_death <- mk_model(characteristics = get_characteristics(pop_init),                         events = list(birth, death),                         parameters = params)  sim_out <- popsim(model = birth_death,                    initial_population = pop_init,                    events_bounds = c('birth' = params$lambda, 'death' = params$mu),                   parameters = params,                    time = 10)  num_births <- length(sim_out$population$birth) - init_size num_deaths <- sum(!is.na(sim_out$population$death)) print(c(\"births\" = num_births, \"deaths\" = num_deaths)) ## births deaths  ##    967   1064"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"population","dir":"Articles","previous_headings":"2 Package description","what":"Population","title":"IBMPopSim package description","text":"population \\(Z_t\\) represented object class ?population containing data frame row corresponds individual \\(=(\\tau^b, \\tau^d, x)\\), least two columns, birth death, corresponding birth date \\(\\tau^b\\) death/exit date \\(\\tau^d\\) (\\(\\tau^d\\) set NA alive individuals). population can contain two columns individuals described multiple characteristics \\(x= (x_1,\\dots x_n)\\). Type characteristic characteristic \\(x_i\\) must atomic type: logical (bool C++), integer (int), double (double) character (char). function ?get_characteristics allows easily get characteristics names types (R C++) ?population. draw attention fact names characteristics reserved specific cases : case birth, death, entry, , id. Entry exit events entry events can occur population, population shall contain characteristic named entry. can done setting flag entry=TRUE ?population function, calling ?add_characteristic function existing population. simulation, date individual enters population automatically recorded variable .entry. exit events can occur, population shall contain characteristic named . can done setting flag =TRUE ?population function, calling ?add_characteristic function. individual exits population simulation, .set TRUE exit time recorded ``death’’ date. example , individuals described birth death dates, well Boolean characteristics called male, entry characteristic. instance, first individual female whose age \\(t_0=0\\) \\(107\\) originally population. Individual C++ compiled model, individual object internal class containing attributes (birth_date, death_date characteristics, male), methods: .age(t): const method returning age individual time t, .set_age(, t): method set age time t individual (set birth_date t-), .is_dead(t): const method returning true individual dead time t.","code":"pop_init <- population(EW_pop_14$sample,entry=TRUE) str(pop_init) ## Classes 'population' and 'data.frame':   100000 obs. of  4 variables: ##  $ birth: num  -107 -107 -105 -104 -104 ... ##  $ death: num  NA NA NA NA NA NA NA NA NA NA ... ##  $ male : logi  FALSE FALSE TRUE FALSE FALSE FALSE ... ##  $ entry: logi  NA NA NA NA NA NA ..."},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"events","dir":"Articles","previous_headings":"2 Package description","what":"Events","title":"IBMPopSim package description","text":"important step model creation events creation. call function creating event form CLASS replaced class event intensity, described Section 1.3 type corresponds event type Section 1.2. summarized . arguments depend intensity class event type. Event types Intensity classes intensity function kernel event defined arguments function mk_event_CLASS. arguments strings composed lines code defining frequency event action event individuals. Since model compiled using Rcpp, code written C++. However, thanks model parameters functions/variables package, even non-experienced C++ user can define model quite easily. Several examples given vignettes package, basic C++ tools presented vignette('IBMPopSim_cpp'). optional argument name gives name event. specified, name event type, instance death. However, name must specified model composed several events type. Parameters order facilitate implementation, user can defined list model parameters, stored named list. parameters can atomic type, numeric vector matrix, predefined function one variable ( ?stepfun, ?linfun, ?gompertz, ?weibull, ?piecewise_x), also piecewise functions two variables (?piecewise_xy). refer details parameters types. parameters’ name can used event intensity definitions. names fixed modified compilation model, whereas values parameters can modified simulation another.","code":"mk_event_CLASS(type = \"TYPE\", name =\"NAME\", ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"intensities","dir":"Articles","previous_headings":"2 Package description > 2.3 Events","what":"Intensities","title":"IBMPopSim package description","text":"Following description events intensities given Section 1.3, intensity event \\(e\\) belong one following three classes: individual intensities without interaction individuals (\\(e\\\\mathcal{E}\\)), corresponding (1.1), individual intensities interaction (\\(e\\\\mathcal{E}_W\\)), corresponding events (1.2), (homogeneous inhomogeneous) Poisson intensities (\\(e\\\\mathcal{P}\\)) \\((\\mu^e_t)_{t\\geq 0}\\). Event creation individual intensity event \\(e\\\\mathcal{E}\\) intensity form \\(\\lambda^e(t, )\\) depends individual \\(\\) time \\(t\\). Events intensity created using function intensity_code argument character string containing lines C++ code describing intensity function \\(\\lambda^e(t, )\\). intensity value stored variable called result variables available (addition model paramaters defined user) intensity code given table . Examples intensity code corresponds death intensity equal \\(d_1() = \\alpha_1 \\exp(\\beta_1 )\\) males \\(d_2() = \\alpha_2 \\exp(\\beta_2 )\\) females. case, intensity function depends individuals’ age, gender, model parameters \\(\\alpha = (\\alpha_1, \\alpha_2)\\) \\(\\beta = (\\beta_1, \\beta_2)\\). example creates death event intensity depending age time, equal \\[\\begin{equation*} d(t,) = 0.1\\exp(0.005a) 1_{\\{0\\leq t <5\\}} + 0.08\\exp(0.005a) 1_{\\{5\\leq t\\}} \\end{equation*}\\] done creating death function \\(d\\) using predefined package functions ?piecewise_xy ?gompertz. function recorded model parameter used argument intensity_code ?mk_event_individual. Event creation interaction intensity event \\(e\\\\mathcal{E}_W\\) event occurs individual frequency result interactions members population (see Equation (1.2)), can written \\(\\lambda^e_t(, Z_t)=\\sum_{J\\Z_t} W^e(t, , J)\\) \\(W^e(t, , J)\\) intensity interaction individual \\(\\) individual \\(J\\). event \\(e\\\\mathcal{E}_W\\) intensity created calling function interaction_code argument contains lines C++ code describing interaction function \\(W^e(t, , J)\\). interaction function value stored variable called result available variables intensity code given table . example, set death intensity individual result competition individuals, depending characteristic named size. argument interaction_type, set default random, algorithm choice simulating model. interaction_type=full, intensity computed according (1.2), can costly large populations. One way avoid summation, set interaction_type random. corresponds replace summation evaluation interaction function \\(W^e\\) using individual \\(J\\) drawn uniformly population. cases, random algorithm much faster full algorithm, illustrate instance vignette('IBMPopSim_interaction'), observe gain factor 20 two algorithms, set standard parameters. allows particular explore parameter sets give larger population sizes, without reaching computation times explode. Note events individual intensities also much faster simulate since require observe one individual computed. C++ variables available intensity code Events creation Poisson Inhomogeneous Poisson intensity events \\(e\\\\mathcal{P}\\) intensity \\(\\mu^e(t)\\) depend population, event intensity class inhomogeneous_poisson poisson depending whether intensity depends time (second case intensity constant). Poisson (constant) intensities events created function following example creates death event, individuals die constant intensity lambda (list model parameters). intensity depends time (population), event can created similarly using function following example creates death event , now individuals die rate \\(\\lambda(1+ \\cos(t))\\).","code":"mk_event_individual(type = \"TYPE\",                     name = \"NAME\",                     intensity_code = \"INTENSITY\", ...) death_intensity<- \"if (I.male)                        result = alpha_1*exp(beta_1*age(I, t));                    else                        result = alpha_2*exp(beta_2*age(I,t));\" time_dep_function <- piecewise_xy(c(5),                                   list(gompertz(0.1,0.005),                                        gompertz(0.08,0.005))) time_dep_function(0, 65) # death intensity at time 0 and age 65. ## [1] 0.1384031 params <- list(\"death_function\"= time_dep_function)  death_event <- mk_event_individual(type = \"death\",                     intensity_code = \"result=time_dep_intensity(t,age(I,t));\") mk_event_interaction(type = \"TYPE\",                      name = \"NAME\",                      interaction_code = \"INTERACTION_CODE\",                      interaction_type = \"random\", ...) death_interaction_code <- \"result = max(J.size -I.size,0);\" mk_event_poisson(type = \"TYPE\",                  name = \"NAME\",                  intensity = \"CONSTANT\", ...) mk_event_poisson(type = \"death\",                  intensity = \"lambda\") mk_event_inhomogeneous_poisson(type = \"TYPE\",                                name = \"NAME\"                                intensity_code = \"INTENSITY\", ...) mk_event_inhomogeneous_poisson(type = \"death\",                                intensity_code = \"result = lambda*(1+cos(t));\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"sub_par::event-kernel-code","dir":"Articles","previous_headings":"2 Package description > 2.3 Events","what":"Event kernel code","title":"IBMPopSim package description","text":"event occurs, model specify event modify population. behavior described kernel_code parameter mk_event_CLASS(type = \"TYPE\", name =\"NAME\", ...) function. kernel_code NULL default doesn’t specified death, exit events birth events, mandatory entry swap events. Recall kernel_code argument string composed lines C++ code, characterizing individual characteristics following event. table end section summarizes list available variables can used kernel_code. Death event user defines death event, death date current individual set current time t. Exit event individual exits population, .set TRUE exit time recorded “death” date. Birth event default generated event kernel individual gives birth new individual newI age 0 current time t, characteristics parent . kernel specified, default generated C++ code birth event : user can modify birth kernel, specify argument kernel_code mk_event_CLASS. case, generated code _KERNEL_CODE_ replaced content kernel_code argument. instance, population individuals characterized gender, kernel code creates new individuals males probability p_male, females otherwise. , p_male included list model parameters. Entry event individual enters population, .entry set date individual enters population. entry occurs individual entering population age \\(0\\). case, user must specify kernel_code argument indicating age characteristics new individual chosen. instance, creates event type Entry, named ev_example, individuals enter population constant intensity lambda (list model parameters). individual newI enters population time t, age chosen normally distributed random variable, mean 20 variance 4, using function CNorm() (see vignette('IBMPopSim_cpp')). C++ variables available events kernel code several entry events, user can identify events generated entry individual adding characteristic population recording event name/id occurs. holds types events. See e.g. vignette('IBMPopSim_human_pop') example different death events.","code":"individual newI = I; newI.birth_date = t; pop.add(newI); individual newI = I; newI.birth_date = t; _KERNEL_CODE_ pop.add(newI); birth_kernel_code <- \"newI.male = (CUnif(0, 1) < p_male);\" mk_event_poisson(type = \"entry\", name = \"ev_example\", intensity = \"lambda\",                  kernel_code = \"double a_I= max(CNorm(20,2),0);                                 newI.set_age(a_I,t);\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"Modelcreation","dir":"Articles","previous_headings":"2 Package description","what":"Model creation","title":"IBMPopSim package description","text":"population, events, model parameters defined, IBM model created using function ?mk_model. step can take seconds, model created compiled using Rcpp package. One advantages model structure IBMPopSim model depends population characteristics’ parameters names types, rather values. means model created, various simulations can done different initial populations parameters values. Example example model population structured age gender, birth death events. death intensity individual age \\(\\) \\[d() = 0.008 \\exp(0.02a),\\] females 15 40 can give birth birth intensity 0.05. newborn male probability \\(p_{male}= 0.51\\).","code":"model <- mk_model(characteristics = get_characteristics(pop_init),                   event = events_list,                   parameters = model_params) params <- list(\"p_male\"= 0.51,                \"birth_rate\" = stepfun(c(15,40),c(0,0.05,0)),                \"death_rate\" = gompertz(0.008,0.02))   death_event <- mk_event_individual(type = \"death\", name= \"my_death_event\",                   intensity_code = \"result = death_rate(age(I,t));\")  birth_event <- mk_event_individual( type = \"birth\",                   intensity_code = \"if (I.male)                                         result = 0;                                     else                                         result=birth_rate(age(I,t));\",                   kernel_code = \"newI.male = CUnif(0, 1) < p_male;\") pop <- population(EW_pop_14$sample)  model <- mk_model(characteristics = get_characteristics(pop),                   events = list(death_event,birth_event),                   parameters = params)  # summary(model)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"simulation","dir":"Articles","previous_headings":"2 Package description","what":"Simulation","title":"IBMPopSim package description","text":"model created, random evolution population can simulated period time \\([0,T]\\) calling function popsim: model model created previous step, pop_init initial population, events_bounds event bounds, parameters list parameters values, age_max maximum age individuals population (set default Inf) time final simulation time \\(T\\) vector times \\((t_1, \\dots ,t_n)\\). IBM simulation algorithm simulating random times fully described (Giorgi, Kaakai, Lemaire 2023).","code":"popsim(model, pop_init, events_bounds, parameters, age_max=Inf, time,...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"events-bounds","dir":"Articles","previous_headings":"2 Package description > 2.5 Simulation","what":"Events bounds","title":"IBMPopSim package description","text":"Since IBM simulation algorithm based acceptance-rejection method simulating random times, user specify bounds intensity (interaction) functions event (see assumptions (1.3) (1.4)). bounds stored named vector, event \\(e\\), name corresponding event bound \\(\\bar{\\mu}^e\\), \\(\\bar{\\lambda}^e\\) \\(\\bar{W}^e\\) event name defined event creation step. Example model example built previous section, birth intensity individual age \\(\\) \\(0\\) male, \\[ b() = 0.005  \\mathbf{1}_{[15,40]},\\] individual female. Thus, intensity bound birth events \\(\\bar\\lambda_b = 0.005\\). Since death intensity function bounded, user specify maximum age \\(a_{max}\\) popsim (individuals \\(a_{max}\\) die automatically). , bound death events \\[ \\bar \\lambda_d = 0.008\\exp(0.02 a_{max}).\\] example, death event named \"my_death_event\". name specified birth event thus default name \"birth\". , Note ?max operator overloaded predefined functions package ?stepfun.","code":"a_max <- 120 # maximum age events_bounds <- c(\"my_death_event\" = 0.008*exp(0.02*a_max),                    \"birth\" = max(params$birth_rate))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"Simulation1","dir":"Articles","previous_headings":"2 Package description > 2.5 Simulation","what":"Simulation","title":"IBMPopSim package description","text":"model events bounds defined, random trajectory population can simulated calling sim_out list composed list arguments simulation inputs, including initial population, parameters event bounds. named numeric vector logs variables related simulation algorithm. simulation output called population. swap events (individuals don’t change characteristics), evolution population period \\([0,30]\\) recorded population object called sim_out$population. line sim_out$population contains information individual lived population period \\([0,30]\\). includes individuals initially pop, well individuals born entered population. following Table  describes elements vector sim_out$logscontaining information simulation algorithm: Logs parameters instance, acceptance rate toy model Optional parameters interactions individuals, .e. events intensity class interaction, simulation can parallelized easily setting optional parameter multithreading (FALSE default) TRUE. default, number threads number concurrent threads supported available hardware implementation. number threads can set manually optional argument num_threads. default, proportion dead individuals population exceeds \\(10\\%\\), dead individuals removed population. user can modify ratio using optional argument clean_ratio, removing dead individuals population certain frequency, given clean_step argument. Finally, user can also define seed random number generator stored argument seed. Parameters modification event removal explained Section 2.4 structure compiled model allows parameters’ values changed without recompiling model. instance, parameter Gompertz death function can modified study impact increase mortality. running simulation, events bounds updated accordingly accordingly. event can also removed setting corresponding event bound 0.","code":"sim_out <- popsim(model, pop, events_bounds, params,                   age_max = a_max, time = 30) sim_out$logs['effective_events']/sim_out$logs['proposed_events'] ## effective_events  ##        0.2183868 params$death_rate <- gompertz(0.01,0.02) # New death rate  events_bounds[\"my_death_event\"] <- 0.01*exp(0.02*a_max) # Death event bound update  new_sim_out <- popsim(model, pop, events_bounds,                       params, age_max = a_max, time = 30) # Population simulation"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"outputs","dir":"Articles","previous_headings":"2 Package description > 2.5 Simulation","what":"Outputs","title":"IBMPopSim package description","text":"Base functions study simulation outputs provided package. instance, population age pyramid can computed give time (resp. multiple dates) function ?age_pyramid (resp. ?age_pyramids). refer vignettes details age pyramids computation visualization.  Mortality tables compatibles packages StMoMo can also computed functions ?death_table ?exposure_table.","code":"pop_out <- sim_out$population  # Population age-pyramid at time 30: pyr <- age_pyramid(pop_out, ages = 0:a_max, time = 30) plot(pyr) female_pop <- pop_out[pop_out$male==FALSE, ] Dxt <- death_table(female_pop, ages = 85:90, period = 20:30)    # Death table Ext <- exposure_table(female_pop, ages = 85:90, period = 20:30)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"simulationswap","dir":"Articles","previous_headings":"2 Package description","what":"Simulation with swap events","title":"IBMPopSim package description","text":"swap events (individuals can change characteristics), recording dates swap events changes characteristics following swap event memory intensive computationally costly process. maintain efficient simulations presence swap events, propose following solution.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"vector-of-times-in-popsim-","dir":"Articles","previous_headings":"2 Package description > 2.6 Simulation with swap events","what":"Vector of times in ?popsim.","title":"IBMPopSim package description","text":"order record individuals’ characteristics different dates, argument time ?popsim can replaced vector dates \\((t_0,\\dots, t_n)\\). case, popsim returns object population list \\(n\\) population representing population time \\(t_1,\\dots t_n\\), simulated initial time \\(t_0\\). \\(=1\\dots n\\), \\(\\)th data frame describes individuals lived population period \\([t_0,t_i]\\), characteristics time \\(t_i\\). Example consider population divided two subgroups. Individuals can swap subgroup 1 (resp. 2) subgroup 2 (resp. 1) rate 0.1 (resp. 0.3). , population simulated \\(t_0=0\\) \\(t_n =20\\): model ergodic two states continuous time Markov chain stationary distribution \\((p_1,p_2)=(0,75,0.25)\\). figure illustrates convergence probability subgroup 1 \\(p_1\\) example shows IBMPopSim can also used simulated continuous time Markov Chain finite state space.","code":"pop <- population(data.frame(\"birth\" = rep(0,1e5), \"death\" = rep(NA,1e5),                   \"sub_grp\" = sample(1:2, 1e5, replace = TRUE)))  rates <- list( k12 = 0.1, k21=0.3) #Only swap events occur in the population swap_event <- mk_event_individual(type = \"swap\",                   intensity_code = \"if (I.sub_grp == 1) result = k12;                                     else result = k21;\",                   kernel_code = \"I.sub_grp = 3 - I.sub_grp;\")  model_swap <- mk_model(characteristics = get_characteristics(pop),                        events = list(swap_event),                        parameters = rates) ## Warning in compatibility_chars_events(characteristics, events): The list of events contains a 'swap' event and there is no 'id' in the characteristics. ## Add 'id' to the characteristics if tracking changes along time is desired. time_vec <- 0:20 sim_out <-popsim(model =model_swap, initial_population= pop,                  events_bounds = c(\"swap\"=max(unlist(rates))),                  parameters =  rates,                  time = time_vec,                  multithreading = TRUE) pop_size <- nrow(pop) # Mean number of individuals in subgroup 1 at each time: p_1_t <- lapply(sim_out$population, function(pop_df){                       return(nrow(subset(pop_df, sub_grp==1))/pop_size) }) ## Error in parse(text = input): <text>:2:0: unexpected end of input ## 1: ggplot()+geom_line(aes(x=time_vec[-1],y=p_1_t)+xlab(\"Time\")+ylab(\"Probability of subgroup 1\") ##    ^"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim.html","id":"individual-life-courses","dir":"Articles","previous_headings":"2 Package description > 2.6 Simulation with swap events","what":"Individual life courses","title":"IBMPopSim package description","text":"possible also isolate individuals’ life course, adding id column population, can done setting id=TRUE population construction, calling ?add_characteristic function existing population, order identify individual unique integer. data frames can merged single data frame summarizing life course individual, calling function merge_pop_withid. line pop_merge corresponds life course one individual. However, population represented time \\(t=0,1..,5\\), data frame doesn’t account exact swap event times multiple swap events occurred two time steps.","code":"pop <- population(pop, id =TRUE) model_swap_id <- mk_model(characteristics =  get_characteristics(pop),                           events = list(swap_event),                           parameters = rates) sim_out_id <-popsim(model = model_swap_id,                     initial_population = pop,                     parameters = rates,                     events_bounds = c(\"swap\"=0.3),                     time = seq(0,5, by=1),                     multithreading = TRUE) head(sim_out_id$population[[1]]) ##   id birth death sub_grp ## 1  1     0    NA       1 ## 2  9     0    NA       2 ## 3 17     0    NA       2 ## 4 25     0    NA       2 ## 5 33     0    NA       1 ## 6 41     0    NA       1 pop_list <- sim_out_id$population pop_merge <- merge_pop_withid(pop_list, chars_tracked='sub_grp') head(pop_merge) ##      id birth death sub_grp_1 sub_grp_2 sub_grp_3 sub_grp_4 sub_grp_5 ## 1     1     0    NA         1         1         1         1         1 ## 2 32769     0    NA         2         1         1         1         1 ## 3 65537     0    NA         2         2         2         2         2 ## 4 98305     0    NA         2         1         2         2         1 ## 5 31074     0    NA         1         1         1         1         1 ## 6 63842     0    NA         1         1         1         1         2"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"c-syntax","dir":"Articles","previous_headings":"","what":"C++ syntax","title":"IBMPopSim C++ essentials","text":"statement must ended semicolon. Single-line comments start two forward slashes //. create variable, must specify type assign value (type variable = value;). examples: bool data type can take values true (1) false (0). Less : < b Less equal : <= b Greater : > b Greater equal : >= b Equal == b Equal : != b logical operators : !, &&, || arithmetic operators : +, -, *, /, % Compound assignment: +=, -=, *=, /=, %= Increment decrement: ++, -- Conditional ternary operator: ? : conditional operator evaluates expression, returning one value expression evaluates true, different one expression evaluates false. syntax : Use , else , else statements specify block C++ code executed one conditions true. syntax switch statement bit peculiar. purpose check value among number possible constant expressions. something similar concatenating -else statements, limited constant expressions. typical syntax : works following way: switch evaluates expression checks equivalent constant1; , executes group--statements-1 finds break statement. finds break statement, program jumps end entire switch statement (closing brace). know exactly many times want loop block code, use loop. loop loops block code long specified condition true. details recommend pages www.cplusplus.com : Variables Operators Statements","code":"int myNum = 5;               // Integer (whole number without decimals) double myFloatNum = 5.99;    // Floating point number (with decimals) char myLetter = 'D';         // Character bool myBoolean = true;       // Boolean (true or false) condition ? result1; : result2; if (condition1) {   // block of code to be executed if condition1 is true } else if (condition2) {   // block of code to be executed if the condition1 is false and condition2 is true } else {   // block of code to be executed if the condition1 is false and condition2 is false } switch (expression) {   case constant1:      group-of-statements-1;      break;   case constant2:      group-of-statements-2;      break;   .   .   .   default:      default-group-of-statements } for (statement 1; statement 2; statement 3) {   // code block to be executed } while (condition) {   // code block to be executed }"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"usual-numeric-functions","dir":"Articles","previous_headings":"","what":"Usual numeric functions","title":"IBMPopSim C++ essentials","text":"popular functions cmath library, included package, following: Exponential logarithm functions: exp(x), log(x) (natural logarithm) Trigonometric functions: cos(x), sin(x), tan(x) Power functions: pow(x, ) meaning \\(x^\\) sqrt(x) meaning \\(\\sqrt{x}\\) Absolute value: abs(x) Truncation functions: ceil(x) meaning \\(\\lceil x \\rceil\\) floor(x) meaning \\(\\lfloor x \\rfloor\\) Bivariate functions: max(x, y) min(x,y) Note functions vectorial, arguments x y must scalar. user wants call functions cmath listed table, possible adding prefix std:: name function (scope resolution operator :: access functions declared namespace standard std).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"cppcharacteristics","dir":"Articles","previous_headings":"","what":"Individuals characteristics and model parameters: link between R and C++","title":"IBMPopSim C++ essentials","text":"facilitate model creation, individuals’ characteristics list model parameters can declared R environment used C++ code. data shared R environment C++ code : characteristics individuals must atomic (Boolean, scalar character). Atomic, vector matrix. Predefined real functions one variable, list functions. Piecewise real function two variables, list .","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"atomic-types-characteristics-and-parameters","dir":"Articles","previous_headings":"Individuals characteristics and model parameters: link between R and C++","what":"Atomic types (characteristics and parameters)","title":"IBMPopSim C++ essentials","text":"conversion table used atomic types R C++. Individuals characteristics characteristics individual defined named character vector containing name characteristic associated C++ type. function ?get_characteristics provides way extract characteristics population data frame. requires birth death characteristics type double. Atomic model parameters model parameters given named list R objects. recall type R object can determined calling ?typeof function. Atomic objects declared model parameters can directly used C++ code. example , variable code contains simple C++ instructions depending parameters defined params. summary model mod gives useful information types characteristics parameters used C++ code.","code":"library(IBMPopSim) pop <- population(IBMPopSim::EW_popIMD_14$sample) get_characteristics(pop) ##   male    IMD  ## \"bool\"  \"int\" params <- list(\"lambda\" = 0.02, \"alpha\" = 0.4, \"mu\" = as.integer(2)) code <- \"result = lambda + alpha * (age(I, t) + mu);\" event_birth <- mk_event_individual(\"birth\", intensity_code = code) mod <- mk_model(get_characteristics(pop), events = list(\"birth\" = event_birth),                  parameters = params, with_compilation = FALSE) summary(mod) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : birth  ## Event name : birth ## Intensity code : 'result = lambda + alpha * (age(I, t) + mu);'  ## Kernel code : ''  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death male IMD  ## R types:  double double logical integer  ## C types:  double double bool int  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  lambda alpha mu  ## R types:  double double integer  ## C types:  double double int"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"cpparmadillo","dir":"Articles","previous_headings":"Individuals characteristics and model parameters: link between R and C++","what":"Vectors and matrices (model parameters)","title":"IBMPopSim C++ essentials","text":"Two possible model parameters types given argument parameters ?mk_model function R vectors R matrices. call R vector numeric length least 2. types converted, using RcppArmadillo library, C++ Armadillo types, arma::vec arma::matrix respectively. classes arma::vec arma::matrix rich easy--use implementations one-dimensional two-dimensional arrays. access individual elements array, use operator () ([] dimension 1). (n) [n] arma::vec, access n-th element. (,j) arma::matrix, access element stored \\(\\)-th row \\(j\\)-th column. Warning: first element array indexed subscript 0 (dimension). Another standard way (C++) access elements used iterators. iterator object , pointing element range elements, ability iterate elements range using set operators (see details iterators). Let v object type arma::vec object type arma::matrix. show get begin end iterators objects. v.begin(): iterator pointing begin v v.end(): iterator pointing end v .begin_row(): iterator pointing first element row .end_row(): iterator pointing last element row .begin_col(): iterator pointing first element column .end_col(): iterator pointing last element column ","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"cppIBMfunctions","dir":"Articles","previous_headings":"Individuals characteristics and model parameters: link between R and C++","what":"Predefined functions (model parameters)","title":"IBMPopSim C++ essentials","text":"facilitate implementation intensity functions kernel code, R functions predefined IBMPopSim, can defined model parameters called C++ code. goal make use transparent possible.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"real-functions-of-one-variable","dir":"Articles","previous_headings":"Individuals characteristics and model parameters: link between R and C++ > Predefined functions (model parameters)","what":"Real functions of one variable","title":"IBMPopSim C++ essentials","text":"list functions can defined R object called R C++. stepfun: Step function. linfun: Linear interpolation function. gompertz: Gompertz–Makeham intensity function. weibull: Weibull density function. piecewise_x: Piecewise real function. See reference manual mathematical definitions functions (?stepfun). model created, predefined functions transformed C++ functions, identified function_x. illustrate examples use functions: define dr stepfun depending values EW_pop_14$rates. Note function applies age .  can also initialize piecewise real function f defined function dr age 80, Gompertz-Makeham intensity function ages 80.  function created defined model parameter, model depending function can defined. example use model stepfun dr model parameter named rate. function used defined intensity death events model. s compilation, parameter rate can actually replaced function type function_x. example can call well ","code":"library(ggfortify) dr <- with(EW_pop_14$rates,            stepfun(x = death_male[,\"age\"], y = c(0, death_male[,\"value\"]))) autoplot(dr, xlab=\"age\", ylab=\"dr\", shape=NULL,main=\"Example of step function\") f <- piecewise_x(80, list(dr, gompertz(0.00006, 0.085))) x <- seq(40, 110) ggplot(data.frame(x=x, y=sapply(x, f)), aes(x=x, y=y))+ geom_step() + xlab(\"Age\") +ylab(\"f\") + ggtitle(\"Example of piecewise function\") params <- list(\"rate\" = dr) event <- mk_event_individual(\"death\", intensity_code = \"result = rate(age(I, t));\") mod <- mk_model(get_characteristics(pop), events = list(\"death\" = event),                  parameters = params, with_compilation = FALSE) summary(mod) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : death  ## Event name : death ## Intensity code : 'result = rate(age(I, t));'  ## Kernel code : ''  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death male IMD  ## R types:  double double logical integer  ## C types:  double double bool int  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  rate  ## R types:  closure  ## C types:  function_x popsim(mod, pop, params = list(\"rate\" = dr), age_max = 120,         events_bounds = c(\"death\" = dr(age_max)), time = 10) popsim(mod, pop, params = list(\"rate\" = f), age_max = 120,         events_bounds = c(\"death\" = f(age_max)), time = 10)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"piecewise-real-functions-of-two-variables","dir":"Articles","previous_headings":"Individuals characteristics and model parameters: link between R and C++ > Predefined functions (model parameters)","what":"Piecewise real functions of two variables","title":"IBMPopSim C++ essentials","text":"C++ code R functions declared ?piecewise_xy identified function_xy functions. See ?piecewise_xy mathematical definition. function allows easily define step function depend age time.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"list-of-functions","dir":"Articles","previous_headings":"Individuals characteristics and model parameters: link between R and C++ > Predefined functions (model parameters)","what":"List of functions","title":"IBMPopSim C++ essentials","text":"parameter can use list functions. R functions list must C++ type: either function_x function_xy. C++ code list functions replaced std::vector function_x function_xy (first element indexed 0).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_cpp.html","id":"randomvar","dir":"Articles","previous_headings":"","what":"Random variables","title":"IBMPopSim C++ essentials","text":"use following notations describe available C++ random distributions, can used C++ intensity kernel codes. \\(\\mathcal{U}(,b)\\) : Uniform distribution \\([, b]\\) \\(< b\\) \\(\\mathcal{E}(\\lambda)\\) : Exponential distribution, \\(\\lambda > 0\\) \\(\\mathcal{N}(\\mu,\\sigma)\\) : Gaussian distribution, \\(\\mu, \\sigma \\\\mathbf{R}\\) \\(\\mathrm{Pois}(\\lambda)\\): Poisson distribution, \\(\\lambda > 0\\) \\(\\Gamma(\\alpha, \\beta)\\): Gamma distribution, \\(\\alpha > 0\\), \\(\\beta > 0\\) \\(\\mathrm{Weib}(, b)\\): Weibull distribution, \\(> 0\\), \\(b > 0\\) \\(\\mathcal{U}\\{, b\\}\\): Discrete uniform distribution \\(\\{, +1, \\dots, b\\}\\) \\(< b\\) \\(\\mathcal{B}(p)\\): Bernoulli distribution, probability success \\(p \\(0,1)\\) \\(\\mathcal{B}(n, p)\\): Binomial distribution \\(n \\ge 1\\), \\(p \\(0,1)\\) \\(\\mathcal{D}_n\\) : Discrete distribution values \\(\\{ 0, \\dots, n-1 \\}\\) probabilities \\(\\{p_0, \\dots, p_{n-1}\\}\\). table show call , means make independent realizations random variables, give reference C++ corresponding function random library hidden call. discrete distribution call CDiscrete(p_begin, p_end), arguments p_begin p_end represent iterators begin end array contains \\(\\{p_0, \\dots, p_{n-1}\\}\\). Note use iterators convenient fast way access column row matrix arma::mat.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"example-description","dir":"Articles","previous_headings":"","what":"Example description","title":"Human population","text":"consider population individuals characterized age gender (male female). Individuals can give birth (female) die. Birth death intensities depend individuals’ age gender, stay constant time. toy model, birth death intensities fitted England Wales’ 2014 birth death rates (source: Office National Statistics).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"population-creation","dir":"Articles","previous_headings":"","what":"Population creation","title":"Human population","text":"initial population created 100 000 individuals data frame sampled England Wales’ 2014 age pyramid distribution (source: Office National Statistics). creating ?population, internal functions proceed several checks, including verifications appropriate column names types.","code":"str(EW_pop_14) ## List of 3 ##  $ age_pyramid:'data.frame': 232 obs. of  3 variables: ##   ..$ age  : Factor w/ 116 levels \"0 - 1\",\"1 - 2\",..: 1 1 2 2 3 3 4 4 5 5 ... ##   ..$ male : logi [1:232] FALSE TRUE FALSE TRUE FALSE TRUE ... ##   ..$ value: num [1:232] 323863 340320 332357 350346 344972 ... ##  $ rates      :List of 3 ##   ..$ birth       :'data.frame': 7 obs. of  2 variables: ##   .. ..$ age  : num [1:7] 15 20 25 30 35 40 45 ##   .. ..$ value: num [1:7] 0.0156 0.0601 0.1008 0.1104 0.0645 ... ##   ..$ death_male  :'data.frame': 91 obs. of  2 variables: ##   .. ..$ age  : int [1:91] 0 1 2 3 4 5 6 7 8 9 ... ##   .. ..$ value: num [1:91] 4.03e-03 3.60e-04 1.52e-04 1.35e-04 7.73e-05 ... ##   ..$ death_female:'data.frame': 91 obs. of  2 variables: ##   .. ..$ age  : int [1:91] 0 1 2 3 4 5 6 7 8 9 ... ##   .. ..$ value: num [1:91] 0.003634 0.000226 0.000139 0.000121 0.000078 ... ##  $ sample     :'data.frame': 100000 obs. of  3 variables: ##   ..$ birth: num [1:100000] -107 -107 -105 -104 -104 ... ##   ..$ death: num [1:100000] NA NA NA NA NA NA NA NA NA NA ... ##   ..$ male : logi [1:100000] FALSE FALSE TRUE FALSE FALSE FALSE ... pop_init <- population(EW_pop_14$sample) plot(pop_init)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"model-parameters","dir":"Articles","previous_headings":"","what":"Model parameters","title":"Human population","text":"Birth death rates fitted England Wales’ 2014 birth death rates.","code":"params <- with(EW_pop_14$rates,     list(\"p_male\" = 0.512, # probability to give birth to a male.          \"birth_rate\" = stepfun(x=birth[,\"age\"], y=c(0,birth[,\"value\"])),          \"death_male\" = stepfun(x=death_male[,\"age\"], y=c(0,death_male[,\"value\"])),          \"death_female\" = stepfun(x=death_female[,\"age\"], y=c(0,death_female[,\"value\"]))         )       )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"events-creation","dir":"Articles","previous_headings":"","what":"Events creation","title":"Human population","text":"2 possible events : Birth Death event intensities class individual, means intensity individual gives birth dies depends age characteristics, individuals characteristics (words, interactions). birth death intensities bounded step functions, constant time. Birth event creation Death event creation","code":"birth_event <- mk_event_individual(     type = \"birth\",     intensity_code = \"if (I.male) result = 0; else result = birth_rate(age(I, t));\",     kernel_code = \"newI.male = CUnif(0, 1) < p_male;\"     # Newborn is male with probability p_male ) death_event <- mk_event_individual(     type = \"death\",     intensity_code = \"result = (I.male) ? death_male(age(I, t)) : death_female(age(I, t));\" )"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"model-creation","dir":"Articles","previous_headings":"5 Model creation and simulation","what":"Model creation","title":"Human population","text":"Computation event intensity bounds (needed acceptance/rejection algorithm)","code":"model <- mk_model(     characteristics = get_characteristics(pop_init), # Characteristics names and types     events = list(birth_event, death_event), # Model events     parameters = params # Model parameters ) summary(model) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : birth  ## Event name : birth ## Intensity code : 'if (I.male) result = 0; else result = birth_rate(age(I, t));'  ## Kernel code : 'newI.male = CUnif(0, 1) < p_male;'  ## [[2]]     ## Event class : individual  ## Event type : death  ## Event name : death ## Intensity code : 'result = (I.male) ? death_male(age(I, t)) : death_female(age(I, t));'  ## Kernel code : ''  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death male  ## R types:  double double logical  ## C types:  double double bool  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  p_male birth_rate death_male death_female  ## R types:  double closure closure closure  ## C types:  double function_x function_x function_x birth_max <- max(params$birth) death_max <- with(params, max(max(death_male), max(death_female)))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"simulation-of-the-population-over-50-years","dir":"Articles","previous_headings":"5 Model creation and simulation","what":"Simulation of the population over 50 years","title":"Human population","text":"Simulation logs ratio accepted events Outputs sim_out$population object class ?population given data frame composed individuals lived population period \\([0,50]\\) (individuals initial population born simulation period). line corresponds individual, date birth , date death (NA still alive end simulation) gender. function ?age_pyramid returns object ?pyramid class containing age pyramid population given time.  Female age pyramid t=50  ?age_pyramids (plural) returns object ?pyramid class representing population age pyramids different times.","code":"sim_out <- popsim(model = model,     initial_population = pop_init,      #Vector of intensity bounds, with name corresponding to events name     events_bounds = c('birth' = birth_max, 'death' = death_max),     parameters = params,     time = 50,     age_max = 120,     multithreading = TRUE) sim_out$logs ##  proposed_events effective_events   cleanall_count      duration_ns  ##          1679160           113202                6         54364564  ## attr(,\"class\") ## [1] \"logs\"    \"numeric\" sim_out$logs[[\"effective_events\"]] / sim_out$logs[[\"proposed_events\"]] ## [1] 0.06741585 pyr_init = age_pyramid(sim_out$population, time = 0,ages = c(0:100,Inf)) pyr = age_pyramid(sim_out$population, time = 50, ages=c(0:100,Inf)) grid.arrange(plot(pyr_init),              plot(pyr,value_breaks = seq(0,800,200))) plot(pyr[pyr$male==FALSE,c(\"age\",\"value\")], age_breaks = as.integer(seq(1,101,5))) pyrs = age_pyramids(sim_out$population, time = 1:50)"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"change-of-initial-population","dir":"Articles","previous_headings":"6 Different simulations with the same model","what":"Change of initial population","title":"Human population","text":"population evolution can simulated starting different initial population, without recompile model.","code":"pop_sample_1e6 <- popsample(pyramid(EW_pop_14$age_pyramid), size = 1e6) plot(pop_sample_1e6) sim_out <- popsim(model = model,     initial_population = pop_sample_1e6,     events_bounds = c('birth' = birth_max, 'death' = death_max),     parameters = params,     time = 50,     age_max = 120,     multithreading = TRUE) sim_out$logs ##  proposed_events effective_events   cleanall_count      duration_ns  ##         16819678          1134604                6        487761662  ## attr(,\"class\") ## [1] \"logs\"    \"numeric\""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"modify-an-intensity","dir":"Articles","previous_headings":"6 Different simulations with the same model","what":"Modify an intensity","title":"Human population","text":"Events intensities /kernels can modified without recompiling model, simply changing parameters value. first toy model, mortality rates assumed constant age 90, maximum age 120 population. leads significant increase number individuals age 100, even though mortality rates don’t change time model. realistic assumption assume mortality rates increase age 90, changing model parameters death_male death_female. two step functions replaced functions type ?piecewise_x, composed step function age 90 linear function older ages.  new model parameters defined, event bounds must updated. modification shape mortality rates ages 90 generates decrease 10% (depending simulation) individuals aged 100 50 years simulation.","code":"death_male_90 <- params$death_male old_death_male <- linfun(x = c(89,120), y = c(death_male_90(89), 0.7)) #?linfun params$death_male <- piecewise_x(c(89), list(death_male_90,old_death_male))  death_female_90 <- params$death_female old_death_female <- linfun(x = c(89,120), y = c(death_female_90(89), 0.7)) params$death_female <- piecewise_x(c(89), list(death_female_90,old_death_female)) sim_out_lin <- popsim(model = model,                   initial_population = pop_sample_1e6,                   events_bounds = c('birth' = birth_max, 'death' = 0.7),                   parameters = params,                   time = 50,                   age_max = 120) pop_size_90plus_const <- nrow(population_alive(sim_out$population,t = 50,a1=90)) pop_size_90plus_lin <- nrow(population_alive(sim_out_lin$population,t = 50,a1=90)) (pop_size_90plus_const-pop_size_90plus_lin)/pop_size_90plus_const*100 ## [1] 6.070031"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"deactivate-an-event","dir":"Articles","previous_headings":"6 Different simulations with the same model","what":"Deactivate an event","title":"Human population","text":"event can deactivated setting event bound 0. age pyramid can directly plotted object class ?population ?plot function.","code":"sim_out <- popsim(model = model,        initial_population = pop_init,        events_bounds = c('birth' = 0, 'death' = death_max),        parameters = params,        age_max = 130,        time = 50) ## [1] \"event birth is deactivated\" grid.arrange(     plot(sim_out$population, time=0, ages= 0:105),     plot(sim_out$population, time=20, ages= 0:105)     ) age_pyramid(sim_out$population, ages = seq(70,90,10), time = 30) ##       age  male value ## 1 70 - 80 FALSE  5801 ## 2 80 - 90 FALSE  3678 ## 3 70 - 80  TRUE  5167 ## 4 80 - 90  TRUE  2802"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"addition-of-number-of-children-characteristic","dir":"Articles","previous_headings":"","what":"Addition of “number of children” characteristic","title":"Human population","text":"number children women can recorded adding new characteristic (named children) changing birth event kernel code. Birth event children count","code":"chi <- get_characteristics(pop_init) chi <- c(chi, 'children' = 'int') # Addition  of characteristic \"chi\" new_birth_event <- mk_event_individual(     type = \"birth\", name =\"birth_child\",     intensity_code = \"if (I.male) result = 0; else result = birth_rate(age(I, t));\",     kernel_code = \" newI.male = CUnif(0, 1) < p_male;                     newI.children = 0;                     //When birth occur, I.children is increased of 1                     I.children += 1;\" ) model_child <- mk_model(     characteristics = chi,     events = list(new_birth_event, death_event),     parameters = params ) summary(model_child) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : birth  ## Event name : birth_child ## Intensity code : 'if (I.male) result = 0; else result = birth_rate(age(I, t));'  ## Kernel code : ' newI.male = CUnif(0, 1) < p_male; ##                     newI.children = 0; ##                     //When birth occur, I.children is increased of 1 ##                     I.children += 1;'  ## [[2]]     ## Event class : individual  ## Event type : death  ## Event name : death ## Intensity code : 'result = (I.male) ? death_male(age(I, t)) : death_female(age(I, t));'  ## Kernel code : ''  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death male children  ## R types:  double double logical integer  ## C types:  double double bool int  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  p_male birth_rate death_male death_female  ## R types:  double closure closure closure  ## C types:  double function_x function_x function_x init_pop <- population(cbind(pop_init, \"children\"=0)) head(init_pop) ##       birth death  male children ## 1 -106.9055    NA FALSE        0 ## 2 -106.8303    NA FALSE        0 ## 3 -104.5097    NA  TRUE        0 ## 4 -104.2218    NA FALSE        0 ## 5 -103.5225    NA FALSE        0 ## 6 -103.3644    NA FALSE        0 sim_out <- popsim(model_child,        initial_population = init_pop,        events_bounds = c('birth_child' = birth_max, 'death' = death_max),        parameters = params,        time = 100,        age_max = 120,        multithreading=TRUE) # Females of age over 50 alive at time 100: pop_female_time <- population_alive(subset(sim_out$population, male == F), t= 100, a1= 50) dim(pop_female_time)[1]# Number of females over 50 ## [1] 16906 mean(pop_female_time$children) #Mean number of children ## [1] 1.828818"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"addition-of-cause-of-death-characteristics","dir":"Articles","previous_headings":"","what":"Addition of “cause of death” characteristics","title":"Human population","text":"order model different competing causes death, several death events can created, modeling one cause death.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"model-with-two-independent-causes-of-death","dir":"Articles","previous_headings":"8 Addition of “cause of death” characteristics","what":"Model with two independent causes of death","title":"Human population","text":"Individuals can die two main causes death 1 2, supposed independent. , death intensity age \\(\\) \\[ \\mu() = \\mu_1() + \\mu_2(),\\] \\(\\mu_i()\\) death intensity age \\(\\) associated cause \\(\\). model can simulated two death events associated cause 1 2, adding new characteristic recording cause death.","code":"chi <- get_characteristics(pop_sample_1e6) chi <- c(chi, 'CoD' = 'int') params$CoD1_prop <- 0.6 death_event1 <- mk_event_individual(                 type = \"death\",                 name=\"CoD1\",                 intensity_code = \"if (I.male) result = CoD1_prop*death_male(age(I,t));                                   else result= CoD1_prop*death_female(age(I,t));\",                 kernel_code = \"I.CoD =1;\" # Records cause of death when event occurs                                     ) death_event2 <- mk_event_individual(                 type = \"death\",                 name=\"CoD2\",                 intensity_code = \"if (I.male) result = (1-CoD1_prop)*death_male(age(I,t));                                   else result= (1-CoD1_prop)*death_female(age(I,t));\",                 kernel_code = \"I.CoD =2;\"                                     ) # Model creation model_CoD <- mk_model(characteristics = chi,                 events = list(birth_event, death_event1, death_event2),                 parameters = params) init_pop_CoD <- population(cbind(pop_sample_1e6, \"CoD\"=NA)) # Initial population ev_bounds <- c('birth' = birth_max,                'CoD1' = params$CoD1_prop*death_max,                'CoD2' = (1-params$CoD1_prop)*death_max)  sim_out_CoD <- popsim(model_CoD,                   initial_population = init_pop_CoD,                   events_bounds = ev_bounds,                   parameters = params,                   time = 20,                   age_max = 120,                   multithreading=TRUE)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop.html","id":"death-and-exposure-table","dir":"Articles","previous_headings":"8 Addition of “cause of death” characteristics","what":"Death and exposure table","title":"Human population","text":"number death given age groups, time periods cause death can computed ?death_table. Example : number males death age \\([70,90]\\) (single year age groups) 5-year period \\([15,20]\\), cause.","code":"Dx_1 <- death_table(subset(sim_out_CoD$population, CoD==1 & male==TRUE),                     ages = 70:90,                     period = c(15,20)) Dx_2 <- death_table(subset(sim_out_CoD$population, CoD==2 & male==TRUE),                     ages = 70:90,                     period = c(15,20)) # Central exposure to risk: Ex <- exposure_table(subset(sim_out_CoD$population, male==TRUE),                     ages = 70:90,                     period = c(15,20)) # Males central death rates by for Cause 1: mx_1 <- Dx_1/Ex # Males central death rates by for Cause 2: mx_2 <- Dx_2/Ex"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"example-description","dir":"Articles","previous_headings":"","what":"Example description","title":"Human population with swap","text":"population structured age, gender IMD. population distributed five IMD quintiles. Group 1 corresponds least deprived subpopulation, group 5 deprived subpopulation. Death birth intensities constant time, depend individuals age, gender IMD. instance, individuals group 5 higher death intensity individuals group 1. Individuals inherit IMD parent birth, can change IMD time, due internal migration. toy model, assume younger individuals around 20 likely move deprived neighborhood, individuals age class 30-45 likely move less deprived neighborhood.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"population-creation","dir":"Articles","previous_headings":"","what":"Population creation","title":"Human population with swap","text":"initial population 100 000 individuals population sampled England Wales’ 2014 age pyramid, structured single year age, gender IMD quintile (source: Office National Statistics). creating ?population, internal functions proceed several checks, include verifications appropriate column names types.","code":"str(EW_popIMD_14) ## List of 3 ##  $ age_pyramid:'data.frame': 1160 obs. of  4 variables: ##   ..$ age  : Factor w/ 116 levels \"0 - 1\",\"1 - 2\",..: 1 1 1 1 1 1 1 1 1 1 ... ##   ..$ IMD  : int [1:1160] 1 2 3 4 5 1 2 3 4 5 ... ##   ..$ male : logi [1:1160] FALSE FALSE FALSE FALSE FALSE TRUE ... ##   ..$ value: num [1:1160] 49114 54293 61541 73289 85626 ... ##  $ death_rates:List of 2 ##   ..$ male  :'data.frame':   455 obs. of  3 variables: ##   .. ..$ age  : int [1:455] 0 1 2 3 4 5 6 7 8 9 ... ##   .. ..$ IMD  : num [1:455] 1 1 1 1 1 1 1 1 1 1 ... ##   .. ..$ value: num [1:455] 2.59e-03 3.13e-04 1.02e-04 1.65e-05 1.46e-04 ... ##   ..$ female:'data.frame':   455 obs. of  3 variables: ##   .. ..$ age  : int [1:455] 0 1 2 3 4 5 6 7 8 9 ... ##   .. ..$ IMD  : num [1:455] 1 1 1 1 1 1 1 1 1 1 ... ##   .. ..$ value: num [1:455] 2.87e-03 2.52e-04 1.43e-04 8.73e-05 1.20e-04 ... ##  $ sample     :'data.frame': 100000 obs. of  4 variables: ##   ..$ birth: num [1:100000] -0.0917 -0.6313 -0.5008 -0.4568 -0.6978 ... ##   ..$ death: num [1:100000] NA NA NA NA NA NA NA NA NA NA ... ##   ..$ male : logi [1:100000] FALSE TRUE TRUE FALSE TRUE FALSE ... ##   ..$ IMD  : int [1:100000] 5 2 5 4 3 4 2 1 5 4 ... pop_init <- population(EW_popIMD_14$sample) head(pop_init) ##         birth death  male IMD ## 1 -0.09170591    NA FALSE   5 ## 2 -0.63126956    NA  TRUE   2 ## 3 -0.50078693    NA  TRUE   5 ## 4 -0.45684987    NA FALSE   4 ## 5 -0.69782311    NA  TRUE   3 ## 6 -0.04470658    NA FALSE   4"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"events-description","dir":"Articles","previous_headings":"","what":"Events description","title":"Human population with swap","text":"3 possible types events : Birth Death Swap (internal migrations) event characterized intensity kernel, follows.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"death-events","dir":"Articles","previous_headings":"3 Events description","what":"Death events","title":"Human population with swap","text":"gender \\(\\epsilon\\) IMD subgroup \\(=1..5\\), define step function \\[d_i^\\epsilon (), \\quad =0,..a_{max}\\] defining death intensity individual age \\(\\), gender \\(\\epsilon\\) subgroup \\(\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"parameters","dir":"Articles","previous_headings":"3 Events description > 3.1 Death events","what":"Parameters","title":"Human population with swap","text":"Death intensities based England Wales’ 2014 age specific death rates gender IMD (source: Office National Statistics). Death rates lower less deprived quintiles.  Step functions creation death intensity functions IMD gender defined parameters model, two lists R step functions. parameters transformed model creation vector C++ step functions (starting index 0). C++ code chunk implementing intensity death event: Creation event default, name event type “death” “death”.","code":"params_death = with(EW_popIMD_14$death_rates,     list(         \"death_male\"=lapply(1:5, function(i) stepfun(x= subset(male, IMD==i)[,\"age\"],                         y= c(0,subset(male, IMD==i)[,\"value\"]))),         \"death_female\"=lapply(1:5, function(i) stepfun(x= subset(female, IMD==i)[,\"age\"],                         y= c(0,subset(female, IMD==i)[,\"value\"])))     ) ) intensity_code_death <- '     if (I.male)         result = death_male[(I.IMD-1)](age(I,t));     else         result = death_female[(I.IMD-1)](age(I,t)); ' death_event <- mk_event_individual(     type = \"death\",     intensity_code = intensity_code_death )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"birth-events","dir":"Articles","previous_headings":"3 Events description","what":"Birth events","title":"Human population with swap","text":"toy model, women give birth, Weibull shaped intensity \\(b_i()\\) depending age \\(\\) IMD subgroup \\(\\), \\[b_i()=TFR_i\\frac{\\beta_i}{\\alpha_i}(\\frac{(-\\bar{})}{\\alpha_i})^{\\beta_i-1}\\exp((-\\frac{-\\bar{}}{\\alpha_i})^{\\beta_i}).\\] functions can implemented using IBMPopSim function weibull(k,c), creates R function corresponding Weibull density function parameters \\((k,c)\\), translated C++ function model creation. default, newborn inherits IMD parent.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"parameters-1","dir":"Articles","previous_headings":"3 Events description > 3.2 Birth events","what":"Parameters","title":"Human population with swap","text":"consider women IMD subgroup 1 2 (resp. 4 5) birth intensity functions. parameters birth events thus composed 10 parameters: \\(\\bar{}\\) \\(\\alpha=(\\alpha_1,\\alpha_2,\\alpha_3)\\) \\(\\beta=(\\beta_1,\\beta_2,\\beta_3)\\) \\(TFR = (TFR_1,TFR_2, TFR_3)\\). Examples parameters values available toy_params$birth.","code":"# birth_sex_ratio = 1.05 params_birth <- with(toy_params$birth,     list(         \"TFR_weights\" = TFR_weights,         \"a_mean\"= 15,         \"birth\" = list(             weibull(beta[1], alpha[1]), # Weibull functions creation             weibull(beta[2], alpha[2]),             weibull(beta[3], alpha[3])),         \"p_male\" = 0.51 # probability to give birth to a male     ) )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"event-creation","dir":"Articles","previous_headings":"3 Events description > 3.2 Birth events","what":"Event creation","title":"Human population with swap","text":"give C++ code implementing intensity birth event. lists params_birth$birth params_birth$TFR_weights internally transformed C++ vectors (index starting 0). Birth event creation","code":"birth_intensity_code <- '     if (I.male) result = 0.;     else {         if (I.IMD <= 2) result = TFR_weights[0] * birth[0](age(I,t)-a_mean);         if (I.IMD == 3) result = TFR_weights[1] * birth[1](age(I,t)-a_mean);         if (I.IMD >= 4) result = TFR_weights[2] * birth[2](age(I,t)-a_mean);     } ' birth_event <- mk_event_individual(     type = \"birth\",     intensity_code = birth_intensity_code,     kernel_code = \"newI.male = CUnif(0, 1) < p_male;\" # Choice of gender for newborn )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"swap-event","dir":"Articles","previous_headings":"3 Events description","what":"Swap event","title":"Human population with swap","text":"Individuals can move lifetime, thus change IMD subgroup (swap events). assume individual can change IMD subgroup intensity depending age IMD subgroup. Young individuals age class \\([15,30]\\) less deprived IMD quintiles (1 2) can move deprived areas, instance studying. hand, older individuals age class \\([30,45]\\) \\([0,15]\\), deprived areas can move less deprived area, modeling instance family creation, moving less deprived areas. Age-specific swap intensities given 5 step functions, one IMD subgroup. swap event occur, new IMD subgroup individual determined discrete random variable depending age.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"parameters-2","dir":"Articles","previous_headings":"3 Events description > 3.3 Swap event","what":"Parameters","title":"Human population with swap","text":"Example parameters values given toy_params$swap. Swap intensity functions saved model parameters list step functions, transformed C++ vector functions model created. vectors discrete probabilities determining action event swap occur saved matrix, transformed Rcpp Armadillo matrix. Note data frames accepted model parameters.  C++ code intensity swap event, using model parameters: C++ kernel code swap event swap event occurs, new IMD subgroup individual determined discrete random variable, probability distribution given row params_swap$swap_distribution, depending age. instance, individual age \\([0,15]\\) probability 0.6 move IMD subgroup 1 0.4 move IMD subgroup 2. Discrete random variables can drawn IBMPopSim calling function Cdiscrete kernel code, Armadillo vector matrix (see Section 3 vignette('IBMPopSim')). Swap event creation:","code":"params_swap <- with(toy_params$swap,     list(         \"swap_intensities\" = apply(intensities, 2, function(rates) stepfun(x=ages,                                     y=rates)),         \"swap_distribution\" = as.matrix(distribution),         \"swap_age_to_idx\" = stepfun(ages, seq(0,3))     ) ) df_intensities <- data.frame(\"age\"=c(0,15,30,45),toy_params$swap$intensities) intensity_code_swap <- '     result = swap_intensities[I.IMD-1](age(I,t)); ' params_swap$swap_distribution ##      IMD1 IMD2 IMD3 IMD4 IMD5 ## [1,]  0.6  0.4  0.0  0.0  0.0 ## [2,]  0.0  0.0  0.4  0.3  0.3 ## [3,]  0.6  0.4  0.0  0.0  0.0 kernel_code_swap <- '     int idx = swap_age_to_idx(age(I,t)); // variables must by typed in C++     I.IMD = CDiscrete(swap_distribution.begin_row(idx),                       swap_distribution.end_row(idx)) + 1; ' swap_event <- mk_event_individual(     type = \"swap\",     intensity_code = intensity_code_swap,     kernel_code = kernel_code_swap )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"model-creation-without-id","dir":"Articles","previous_headings":"","what":"Model creation (without id)","title":"Human population with swap","text":"model created calling function ?mk_model arguments: individuals’ characteristics. events list. vector model parameters (parameters name types saved).","code":"params = c(params_birth, params_death, params_swap) model <- mk_model(     characteristics = get_characteristics(pop_init),     events = list(birth_event, death_event, swap_event),     parameters = params) ## Warning in compatibility_chars_events(characteristics, events): The list of events contains a 'swap' event and there is no 'id' in the characteristics. ## Add 'id' to the characteristics if tracking changes along time is desired.  summary(model) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : birth  ## Event name : birth ## Intensity code : ' ##     if (I.male) result = 0.; ##     else { ##         if (I.IMD <= 2) result = TFR_weights[0] * birth[0](age(I,t)-a_mean); ##         if (I.IMD == 3) result = TFR_weights[1] * birth[1](age(I,t)-a_mean); ##         if (I.IMD >= 4) result = TFR_weights[2] * birth[2](age(I,t)-a_mean); ##     } ## '  ## Kernel code : 'newI.male = CUnif(0, 1) < p_male;'  ## [[2]]     ## Event class : individual  ## Event type : death  ## Event name : death ## Intensity code : ' ##     if (I.male) ##         result = death_male[(I.IMD-1)](age(I,t)); ##     else ##         result = death_female[(I.IMD-1)](age(I,t)); ## '  ## Kernel code : ''  ## [[3]]     ## Event class : individual  ## Event type : swap  ## Event name : swap ## Intensity code : ' ##     result = swap_intensities[I.IMD-1](age(I,t)); ## '  ## Kernel code : ' ##     int idx = swap_age_to_idx(age(I,t)); // variables must by typed in C++ ##     I.IMD = CDiscrete(swap_distribution.begin_row(idx), ##                       swap_distribution.end_row(idx)) + 1; ## '  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death male IMD  ## R types:  double double logical integer  ## C types:  double double bool int  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  TFR_weights a_mean birth p_male death_male death_female swap_intensities swap_distribution swap_age_to_idx  ## R types:  vector double list double list list list matrix closure  ## C types:  arma::vec double list_of_function_x double list_of_function_x list_of_function_x list_of_function_x arma::mat function_x"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"events-bounds","dir":"Articles","previous_headings":"5 Simulation","what":"Events bounds","title":"Human population with swap","text":"first step simulating model compute bounds event intensity. Birth intensity bound Death intensity bound operator ?max overloaded IBMPopSim can applied step functions. Swap intensity bound","code":"E <-c(0,50) birth_max <- with(params,                   max(sapply(1:3, function(i)(                       TFR_weights[i]* optimize(f=birth[[i]], interval=E,                         maximum=TRUE)$objective)))                   ) death_max <- max(sapply(params$death_male, max),                  sapply(params$death_female, max)) swap_max <- max(sapply(params$swap_intensities, max))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"simulation-1","dir":"Articles","previous_headings":"5 Simulation","what":"Simulation","title":"Human population with swap","text":"Recording swap events computationally expensive. overcome difficulty, simulation presence swap events returns list populations, composed “picture” population times vector argument time popsim (see vignette('IBMPopSim') details). first component variable t_sim initial time. simulation returns n-1 populations representing population \\(t\\_sim[1],..,t\\_sim[n]\\). population corresponding time \\(t\\_sim[]\\) composed individuals lived population \\(t\\_sim[]\\), characteristics time \\(t\\_sim[]\\). events_bounds names must correspond events names.","code":"t_sim <- 0:50 n <- length(t_sim) sim_out <- popsim(model,     initial_population = pop_init,     events_bounds = c('birth' = birth_max, 'swap' = swap_max, 'death' = death_max),     parameters = params,     time = t_sim,     multithreading=TRUE # Set to T since there are no interactions     )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Human population with swap","text":"Swap events modify population composition, increasing proportion individuals less deprived subgroups, especially younger age groups.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"initial-and-final-age-pyramids-with-different-imd-subgroups","dir":"Articles","previous_headings":"6 Outputs","what":"Initial and final age pyramids with different IMD subgroups","title":"Human population with swap","text":"Final age pyramid   high number individuals aged 100 due fact mortality rates assumed constant ages 90, course realistic human populations (see vignette('IBMPopSim_human_pop') another choice mortality rates).","code":"pyr_init<- age_pyramids(population(EW_popIMD_14$sample),time = 0, ages = c(0:100,130)) pyr_init$group_name <- with(pyr_init, ifelse(male, paste('Males - IMD', IMD),                         paste('Females - IMD', IMD))) pops_out <- sim_out$population pyr_IMD <- age_pyramid(pops_out[[50]], time = 50,ages = c(0:100,130)) pyr_IMD$group_name <- with(pyr_IMD, ifelse(male, paste('Males - IMD', IMD),                         paste('Females - IMD', IMD))) colors <- c(sequential_hcl(n=5, palette = \"Magenta\"),             sequential_hcl(n=5, palette = \"Teal\")) names(colors) <- c(paste('Females - IMD', 1:5),                    paste('Males - IMD', 1:5)) plot(pyr_init,colors) plot(pyr_IMD,colors)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"evolution-of-population-composition-by-age-group","dir":"Articles","previous_headings":"6 Outputs","what":"Evolution of population composition by age group","title":"Human population with swap","text":"plots illustrates evolution female population composition different age groups time.","code":"age_grp <- seq(30,95,15) age_pyrs <- lapply(1:(n-1), function (i)(age_pyramid(pops_out[[i]],t_sim[i+1],age_grp))) age_pyr_fem <- filter(bind_rows(age_pyrs,.id=\"time\"), male==FALSE) compo_pop_fem <- age_pyr_fem %>%         group_by(age,time) %>%         mutate(composition = value/sum(value))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"different-simulations-with-the-same-model","dir":"Articles","previous_headings":"","what":"Different simulations with the same model","title":"Human population with swap","text":"model parameters initial population can modified without recompile model. particular, events can deactivated setting event bound 0.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"simulation-without-swap-events","dir":"Articles","previous_headings":"7 Different simulations with the same model","what":"Simulation without swap events","title":"Human population with swap","text":"Comparison population evolution without swap events","code":"sim_out_noswp <- popsim(model,     initial_population = pop_init,     events_bounds = c('birth' = birth_max, 'swap' = 0, 'death' = death_max),             # Swap events deactivated     parameters = params,     time = t_sim,     multithreading=TRUE) ## [1] \"event swap is deactivated\" age_pyrs_nosw <- lapply(1:(n-1), function (i)(age_pyramid(sim_out_noswp$population[[i]],                               t_sim[i+1],age_grp))) compo_pop_fem_nosw <- filter(bind_rows(age_pyrs_nosw,.id=\"time\"), male==FALSE) %>%                 group_by(age,time) %>% mutate(perc=value/sum(value))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_human_pop_IMD.html","id":"simulation-of-individual-life-courses","dir":"Articles","previous_headings":"7 Different simulations with the same model","what":"Simulation of individual life courses","title":"Human population with swap","text":"presence swap events, individual trajectories can isolated attributing unique id individuals population. done population creation setting optional argument id TRUE. individual attributed unique id, population summarizing life course can obtained simulation output sim_out_id$population(list populations) calling function merge_pop_withid. Characteristics tracked time must specified argument chars_tracked. pop_id population line corresponds individual include id, birth date, death date, gender IMD subgroup discretization time (components \\(t_{sim}\\)).","code":"pop_init <- population(pop_init, id=TRUE) model_id <- mk_model(     characteristics = get_characteristics(pop_init),     events = list(birth_event, death_event, swap_event),     parameters = params     ) sim_out_id <- popsim(model_id,     initial_population = pop_init,     events_bounds = c('birth' = birth_max, 'swap' = swap_max, 'death' = death_max),     parameters = params,     time = t_sim,     multithreading=TRUE) pop_id <- merge_pop_withid(sim_out_id$population, chars_tracked = \"IMD\") head(pop_id) ##       id        birth death  male IMD_1 IMD_2 IMD_3 IMD_4 IMD_5 IMD_6 IMD_7 IMD_8 IMD_9 ## 1      1  -0.09170591    NA FALSE     5     5     5     5     5     5     5     5     5 ## 2 110564   7.39519548    NA FALSE    NA    NA    NA    NA    NA    NA    NA     1     2 ## 3  41150 -32.68554807    NA  TRUE     5     4     1     5     5     4     1     4     4 ## 4 156038  45.42923701    NA  TRUE    NA    NA    NA    NA    NA    NA    NA    NA    NA ## 5 118304  14.50780381    NA  TRUE    NA    NA    NA    NA    NA    NA    NA    NA    NA ## 6   6482  -5.61821716    NA  TRUE     4     2     5     5     4     1     4     2     5 ##   IMD_10 IMD_11 IMD_12 IMD_13 IMD_14 IMD_15 IMD_16 IMD_17 IMD_18 IMD_19 IMD_20 IMD_21 ## 1      5      5      5      5      5      5      5      5      5      5      5      5 ## 2      4      1      1      2      3      3      4      3      5      4      5      2 ## 3      1      1      3      1      1      5      3      1      3      2      1      3 ## 4     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA ## 5     NA     NA     NA     NA     NA      2      2      5      2      1      2      4 ## 6      4      5      2      5      3      2      3      3      1      3      4      1 ##   IMD_22 IMD_23 IMD_24 IMD_25 IMD_26 IMD_27 IMD_28 IMD_29 IMD_30 IMD_31 IMD_32 IMD_33 ## 1      5      5      5      5      5      5      5      5      5      5      5      5 ## 2      3      5      1      4      3      5      2      1      2      4      4      2 ## 3      3      1      4      1      1      5      4      2      1      5      4      4 ## 4     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA ## 5      3      3      3      5      4      5      2      3      5      4      5      2 ## 6      5      2      1      5      3      1      2      3      5      5      2      1 ##   IMD_34 IMD_35 IMD_36 IMD_37 IMD_38 IMD_39 IMD_40 IMD_41 IMD_42 IMD_43 IMD_44 IMD_45 ## 1      5      5      5      5      5      5      5      5      5      5      5      5 ## 2      1      1      3      4      1      3      2      1      1      2      2      5 ## 3      2      3      1      3      2      1      2      5      4      1      1      5 ## 4     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA     NA ## 5      1      1      5      1      2      4      2      3      5      5      4      5 ## 6      3      1      1      5      4      2      2      3      4      5      1      1 ##   IMD_46 IMD_47 IMD_48 IMD_49 IMD_50 ## 1      5      5      5      5      5 ## 2      4      1      1      1      1 ## 3      1      4      5      1      1 ## 4      3      4      1      4      3 ## 5      4      3      2      1      3 ## 6      1      5      1      3      2"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"example-description","dir":"Articles","previous_headings":"","what":"Example description","title":"Insurance portfolio","text":"consider insurance portfolio composed males policyholders, characterized age risk class (instance smokers vs non smokers). Entries portfolio modeled Poissonian events, individuals can die exit portfolio intensity depending age risk class.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"population-creation","dir":"Articles","previous_headings":"","what":"Population creation","title":"Insurance portfolio","text":"start initial population 10 000 males age 65, distributed uniformly risk class. population data frame thus two (mandatory) columns: birth : Date birth policyholders (initial time \\(t_0=0\\)). death: Date death (NA alive). column risk_cls corresponding policyholders risk class. Since individuals free get interrupt life insurance time, type population entry exit events, hence create population flags ‘entry ’’ set TRUE. create 2 additional columns population recording entry exit events. creation, entry values set NA values set FALSE.","code":"N <- 30000 pop_df <- data.frame(\"birth\"=rep(-65,N),\"death\"=rep(NA,N),\"risk_cls\"= rep(1:2,each= N/2)) pop_init <- population(pop_df, entry=TRUE, out=TRUE)"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"death-intensity","dir":"Articles","previous_headings":"3 Model parameters","what":"Death intensity","title":"Insurance portfolio","text":"Death intensities calibrated England Wales (EW) males mortality data (source: Human Mortality Database), forecasted t=30 years Lee-Carter model package StMoMo. Individuals risk class 1 assumed mortality rates 20% higher forecasted mortality rates individuals risk class 2 assumed mortality rates 20% lower forecasted rates. death intensity individual risk class \\(=1,2\\) thus function \\[\\begin{equation} \\tag{3.1} d^(t,)= \\alpha_i \\sum_{k=0}^{29}\\mathbf{1}_{\\{k\\leq t < k+1\\}} d_k(), \\quad \\alpha_1 = 1.2, \\quad \\alpha_2 = 0.8, \\end{equation}\\] \\(d_k()\\) point estimate mortality rate age \\(\\) year \\(2017 + k\\).  Age time dependent function can created package function ?piecewise_xy, allows define age-specific mortality rates, piecewise constant time, \\(d^\\) (3.1).","code":"EWStMoMoMale <- StMoMoData(EWdata_hmd, series = \"male\")  #Fitting LC <- lc() ages.fit <- 65:100 years.fit <- 1950:2016 LCfitMale <- fit(LC, data = EWStMoMoMale, ages.fit = ages.fit, years.fit = years.fit) ## StMoMo: Start fitting with gnm ## Initialising ## Running start-up iterations.. ## Running main iterations..... ## Done ## StMoMo: Finish fitting with gnm t <- 30 LCforecastMale <- forecast(LCfitMale, h = t) plot(LCforecastMale) d_k <- apply(LCforecastMale$rates, 2, function(x) stepfun(66:100, x)) breaks <- 1:29 death_male <- piecewise_xy(breaks,d_k) death_male(10,65) # Death rate at time t=10 (years 2027) and age 60. ## [1] 0.009082013 params <- list(\"death_male\" = death_male, \"alpha\" = c(1.3,0.8))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"exit-events","dir":"Articles","previous_headings":"3 Model parameters","what":"Exit events","title":"Insurance portfolio","text":"Individuals exit portfolio rate \\(\\mu^{}\\), \\(=1,2\\) depending risk class.","code":"params$mu <- c(0.001,0.06) # Exit event rate"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"entry-events","dir":"Articles","previous_headings":"3 Model parameters","what":"Entry events","title":"Insurance portfolio","text":"Entry events occur Poissonian (constant) rate \\(\\lambda\\) (average \\(\\lambda\\) individuals enter population year).","code":"params$lambda <- 30000 # Entry events"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"death-events-creation","dir":"Articles","previous_headings":"4 Events creation","what":"Death events creation","title":"Insurance portfolio","text":"vector parameter alpha transformed C++ vector (index starting 0) model creation, death_male C++ function.","code":"death_event <- mk_event_individual(     type = \"death\",     intensity_code = \"result = alpha[I.risk_cls-1] * death_male(t,age(I, t));\" )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"exit-events-creation","dir":"Articles","previous_headings":"4 Events creation","what":"Exit events creation","title":"Insurance portfolio","text":"individual portfolio can exit portfolio constant (individual) rate \\(\\mu^\\) depending risk class. presence events type exit, population must characteristic named , set FALSE default (see function ‘?population’). individual leaves population, characteristic set TRUE date exited population recorded column death.","code":"exit_event <- mk_event_individual(     type = \"exit\",     intensity = \"result = mu[I.risk_cls-1]; \" )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"entry-event-creation","dir":"Articles","previous_headings":"4 Events creation","what":"Entry event creation","title":"Insurance portfolio","text":"New policyholders enter population constant rate \\(\\lambda\\) (average, \\(\\lambda\\) individuals enter portfolio year). new individual entering population age \\(\\) given uniform variable \\([65,70]\\), risk class 1 probability \\(p\\). presence events type entry, population must characteristic named entry, initially set NA default (see function ‘?population’). individual enters population, characteristic entry set date \\(t\\) enters population. Note entries can also occur rate \\(\\lambda(t)\\) depending time. details, see documentation ?mk_event_poisson_inhomogeneous.","code":"params$p <- 0.5 entry_event <- mk_event_poisson(     type = \"entry\",     intensity = \"lambda\",     kernel_code = \"if (CUnif()<p)                         newI.risk_cls =1;                    else                         newI.risk_cls= 2;                    double a = CUnif(65,70);                    newI.set_age(a,t);                    newI.out = false;\" )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"model-creation","dir":"Articles","previous_headings":"","what":"Model creation","title":"Insurance portfolio","text":"","code":"model <- mk_model(     characteristics = get_characteristics(pop_init), # Characteristics names and types     events = list(death_event,entry_event, exit_event), # Events list     parameters = params # Model parameters ) summary(model) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : death  ## Event name : death ## Intensity code : 'result = alpha[I.risk_cls-1] * death_male(t,age(I, t));'  ## Kernel code : ''  ## [[2]]     ## Event class : poisson  ## Event type : entry  ## Event name : entry ## Intensity code : 'lambda'  ## Kernel code : 'if (CUnif()<p) ##                         newI.risk_cls =1; ##                    else ##                         newI.risk_cls= 2; ##                    double a = CUnif(65,70); ##                    newI.set_age(a,t); ##                    newI.out = false;'  ## [[3]]     ## Event class : individual  ## Event type : exit  ## Event name : exit ## Intensity code : 'result = mu[I.risk_cls-1]; '  ## Kernel code : ''  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death risk_cls entry out  ## R types:  double double integer double logical  ## C types:  double double int double bool  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  death_male alpha mu lambda p  ## R types:  closure vector vector double double  ## C types:  function_xy arma::vec arma::vec double double"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"computation-of-event-intensity-bounds","dir":"Articles","previous_headings":"6 Simulation","what":"Computation of event intensity bounds","title":"Insurance portfolio","text":"events Poisson (constant) intensity, bound simply intensity.","code":"death_max <- max(sapply(d_k, function(x) { max(x) }))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"simulation-1","dir":"Articles","previous_headings":"6 Simulation","what":"Simulation","title":"Insurance portfolio","text":"Ratio accepted events","code":"sim_out <- popsim(model = model,     initial_population = pop_init,     events_bounds = c('death' = death_max, \"entry\"=params$lambda, \"exit\"=max(params$mu)),     parameters = params,     time = t,     age_max = 110,     multithreading = TRUE) sim_out$logs[[\"effective_events\"]] / sim_out$logs[[\"proposed_events\"]] ## [1] 0.2507238"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Insurance portfolio","text":"output population sim_out$population composed individuals present portfolio period \\([0, t]\\) (individuals initial population entered portfolio). line corresponds individual, date birth, date death (NA still alive end simulation), risk class, characteristic . characteristics set TRUE individuals left portfolio due exit event. function ?age_pyramid computes age pyramid population given time.","code":"str(sim_out$population) ## Classes 'population' and 'data.frame':   929184 obs. of  5 variables: ##  $ birth   : num  -65 -65 -65 -65 -65 -65 -65 -65 -65 -65 ... ##  $ death   : num  NA NA NA NA NA NA NA NA NA NA ... ##  $ risk_cls: int  1 1 1 1 1 1 1 1 1 1 ... ##  $ entry   : num  NA NA NA NA NA NA NA NA NA NA ... ##  $ out     : logi  FALSE FALSE FALSE FALSE FALSE FALSE ..."},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"age-pyramids","dir":"Articles","previous_headings":"7 Outputs","what":"Age pyramids","title":"Insurance portfolio","text":"order visualize risk classes age pyramid ?plot.pyramid column group_name containing individuals risk classes must added age pyramid, colors representing subgroup specified.","code":"age_grp <- 65:98 pyr = age_pyramid(sim_out$population, time = 30, ages=age_grp) plot(pyr, age_breaks = as.integer(seq(1,length(age_grp)-1,by=2))) colnames(pyr)[2]<- \"group_name\" pyr$group_name <- as.character(pyr$group_name) colors <- c(\"1\"=\"#00AFBB\",\"2\"=\"#FC4E07\") plot(pyr,colors,age_breaks = as.integer(seq(1,length(age_grp)-1,by=2)))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"life-tables","dir":"Articles","previous_headings":"7 Outputs","what":"Life tables","title":"Insurance portfolio","text":"Death exposure tables can computed simulation, taking account censoring due exit events. Note individuals enter population different ages, functions ?death_table ?exposure_table take account right censoring.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"risk-class-1","dir":"Articles","previous_headings":"7 Outputs > 7.2 Life tables","what":"Risk class 1","title":"Insurance portfolio","text":"Death exposure data can computed simulated portfolio. example individuals risk class 1. Lee-Carter model reestimated simulated data, compared initial forecast.","code":"age_grp <- 65:95 Dx <- death_table(sim_out$population[sim_out$population$risk_cls==1,],                   ages = age_grp, period = 0:30) Ex <- exposure_table(sim_out$population[sim_out$population$risk_cls==1,],                      ages = age_grp, period = 0:30) LC <- lc() LCfitSim1 <- fit(LC, Dxt = Dx , Ext = Ex,ages=age_grp[-length(age_grp)])"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"global-portfolio","dir":"Articles","previous_headings":"7 Outputs > 7.2 Life tables","what":"Global portfolio","title":"Insurance portfolio","text":"Due mortality differential risk class 1 2, individuals risk class 2 higher ages. However, due exit events, individuals risk class 1 exit portfolio time, leading higher proportion individuals risk class 1 higher ages expected exit events. Thus, mortality rates closer mortality rates risk class 1 higher ages. Computation central mortality rates  Evolution portfolio mortality rates time decrease mortality rates slower portfolio global population due composition changes.  Cohort mortality rates","code":"Dx_pop <- death_table(sim_out$population, ages = age_grp, period = 0:30) Ex_pop <- exposure_table(sim_out$population, ages = age_grp, period = 0:30) mx_pop <- Dx_pop/Ex_pop"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_insurance_portfolio.html","id":"different-simulations-with-the-same-model","dir":"Articles","previous_headings":"","what":"Different simulations with the same model","title":"Insurance portfolio","text":"initial population model parameters can modified without recompile model, order simulate population model different input. event bounds must modified accordingly running simulation. event can also deactivated setting event bound 0. See vignette('IBMPopSim_human_pop') several examples.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"example-description","dir":"Articles","previous_headings":"","what":"Example description","title":"Population with genetically variable traits","text":"recall example 1 (Ferrière Tran 2009). Individuals characterized body size birth \\(x_0 \\[0,4]\\), heritable trait subject mutation, physical age \\(\\[0,2]\\). body size increasing function age, size individual age \\(\\) \\[x=x_0 + ga,\\] \\(g\\) growth rate, assumed constant identical individuals. 2 possible events : Birth: individual can give birth offspring, intensity \\[b(x_0) = \\alpha (4 - x_0)\\] depending parameter \\(\\alpha\\) initial size. Smaller individuals higher birth intensity. birth occurs, new individual size parent high probability \\(1-p\\). mutation can occur probability \\(p\\) birth size new individual \\[x_0'  = \\min(\\max(0, x_0 + G), 4),\\] \\(G\\) Gaussian random variable \\(\\mathcal{N}(0,\\sigma^2)\\). Death: Due competition individuals, death intensity individual depends size individuals population. Bigger individuals better chance survival, individual size \\(x_0 +ga\\) encounters individual size \\(x_0'+ ga'\\), can die intensity \\[ U (x_0 + g , x_0' - g '),\\] interaction function \\(U\\) defined \\[U(x,y) = \\beta \\left( 1- \\frac{1}{1+ c\\exp(-4(x-y))}\\right).\\] death intensity individual size \\(x_0 + ga\\) time \\(t\\) thus result interactions individuals population (including ) \\[d(x_0,,t,pop) = \\sum_{(x_0', ') \\pop}  U (x_0 + g , x_0' + g ').\\]","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"population-creation","dir":"Articles","previous_headings":"","what":"Population creation","title":"Population with genetically variable traits","text":"initial population generated ?population 900 individuals, birth date uniformly chosen [0,2] birth size \\(x_0 = 1.06\\).","code":"# Generate population N <- 900 x0 <- 1.06 agemin <- 0. agemax <- 2. pop_df_init <- data.frame(   \"birth\" = -runif(N, agemin, agemax),   \"death\" = as.double(NA),   \"birth_size\" = x0 ) pop_init <- population(pop_df_init) get_characteristics(pop_init) ## birth_size  ##   \"double\""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"events-and-model-creation","dir":"Articles","previous_headings":"","what":"Events and model creation","title":"Population with genetically variable traits","text":"2 possible events : Birth (without mutation) Death event characterized intensity kernel code, described .","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"birth-event-with-individual-intensity","dir":"Articles","previous_headings":"3 Events and model creation","what":"Birth event with individual intensity","title":"Population with genetically variable traits","text":"individual size \\(x_0 \\[0,4]\\) gives birth age independent rate given \\[b(x_0) = \\alpha (4 - x_0)\\] Since intensity depends individual’s characteristics, event intensity type individual. probability \\(p = 0.03\\) mutation occurs, probability \\(1 - p\\), offspring inherits parent’s trait, \\(x_0\\). case mutation, new trait \\(x_0'  = \\min(\\max(0, x_0 + G), 4)\\), \\(G\\) Gaussian r.v. expectation 0 variance \\(\\sigma^2=0.01\\). birth event individual event type birth, created follows:","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"parameters","dir":"Articles","previous_headings":"3 Events and model creation > 3.1 Birth event with individual intensity","what":"Parameters","title":"Population with genetically variable traits","text":"","code":"# parameters for birth event params_birth <- list(   \"p\" = 0.03,   \"sigma\" = sqrt(0.01),   \"alpha\" = 1)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"event-creation","dir":"Articles","previous_headings":"3 Events and model creation > 3.1 Birth event with individual intensity","what":"Event creation","title":"Population with genetically variable traits","text":"","code":"birth_event <- mk_event_individual( type = \"birth\",   intensity_code = 'result = alpha * (4 - I.birth_size);',   kernel_code = 'if (CUnif() < p)                      newI.birth_size = min(max(0., CNorm(I.birth_size, sigma)), 4.);                  else                      newI.birth_size = I.birth_size;')"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"death-event-with-interaction","dir":"Articles","previous_headings":"3 Events and model creation","what":"Death event with interaction","title":"Population with genetically variable traits","text":"death intensity individual trait \\(x_0 \\[0, 4]\\) age \\(\\[0, 2]\\) given : \\[d(x_0,,t,pop) = \\sum_{(x_0', ') \\pop}  U (x_0 + g , x_0' + g ').\\] \\[U(x,y) = \\beta \\left( 1- \\frac{1}{1+c\\exp(-4(x-y))}\\right) \\\\left[ 0, \\beta\\right] \\] event intensity depends interaction kernel \\(U\\), type interaction.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"parameters-1","dir":"Articles","previous_headings":"3 Events and model creation > 3.2 Death event with interaction","what":"Parameters","title":"Population with genetically variable traits","text":"","code":"# parameters for death event params_death <- list(   \"g\" = 1,   \"beta\" = 2./300.,   \"c\" = 1.2 )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"event-creation-1","dir":"Articles","previous_headings":"3 Events and model creation > 3.2 Death event with interaction","what":"Event creation","title":"Population with genetically variable traits","text":"","code":"death_event <- mk_event_interaction( # Event with intensity of type interaction   type = \"death\",   interaction_code = \"double x_I = I.birth_size + g * age(I,t);                       double x_J = J.birth_size + g * age(J,t);                       result = beta * ( 1.- 1./(1. + c * exp(-4. * (x_I-x_J))));\" )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"model-creation","dir":"Articles","previous_headings":"3 Events and model creation","what":"Model creation","title":"Population with genetically variable traits","text":"","code":"model <- mk_model(   characteristics = get_characteristics(pop_init),   events = list(birth_event, death_event),   parameters = c(params_birth, params_death) ) summary(model) ## Events description: ## [[1]]     ## Event class : individual  ## Event type : birth  ## Event name : birth ## Intensity code : 'result = alpha * (4 - I.birth_size);'  ## Kernel code : 'if (CUnif() < p) ##                      newI.birth_size = min(max(0., CNorm(I.birth_size, sigma)), 4.); ##                  else ##                      newI.birth_size = I.birth_size;'  ## [[2]]     ## Event class : interaction  ## Event type : death  ## Event name : death ## Intensity code : 'double x_I = I.birth_size + g * age(I,t); ##                       double x_J = J.birth_size + g * age(J,t); ##                       result = beta * ( 1.- 1./(1. + c * exp(-4. * (x_I-x_J))));'  ## Kernel code : ''  ##  ## ---------------------------------------  ## Individual description: ## names:  birth death birth_size  ## R types:  double double double  ## C types:  double double double  ## ---------------------------------------  ## R parameters available in C++ code: ## names:  p sigma alpha g beta c  ## R types:  double double double double double double  ## C types:  double double double double double double"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Population with genetically variable traits","text":"Event bounds Bounds birth intensity death interaction function \\(U\\) computed.","code":"birth_intensity_max <- 4*params_birth$alpha interaction_fun_max <- params_death$beta T = 500  # Multithreading is NOT possible due to interaction between individuals  sim_out <- popsim(model = model,   initial_population = pop_init,   events_bounds = c('birth'=birth_intensity_max, 'death'=interaction_fun_max),   parameters = c(params_birth, params_death),   age_max = 2,   time = T) sim_out$logs[\"duration_ns\"] ## duration_ns  ##   113113894"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Population with genetically variable traits","text":"output population sim_out$population contains individuals lived population period [0,500]. Population size \\(t=500\\). Result (Ferrière Tran 2009) can reproduced simulation. individual population, draw line representing birth size life time.","code":"str(sim_out$population) ## Classes 'population' and 'data.frame':   328279 obs. of  3 variables: ##  $ birth     : num  498 498 498 498 498 ... ##  $ death     : num  NA NA NA NA NA NA NA NA NA NA ... ##  $ birth_size: num  2.71 2.64 2.51 2.67 2.85 ... pop_out <- sim_out$population pop_size <- nrow(population_alive(pop_out,t = 500)) pop_size ## [1] 379"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"simulation-with-different-parameters","dir":"Articles","previous_headings":"","what":"Simulation with different parameters","title":"Population with genetically variable traits","text":"model can simulated different parameters without recompiled.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"impact-of-aging-velocity","dir":"Articles","previous_headings":"6 Simulation with different parameters","what":"Impact of aging velocity","title":"Population with genetically variable traits","text":"ageing velocity impact distribution birth sizes time. Events bounds modified since depend \\(g\\).  Evolution age pyramid birth size ?age_pyramid returns age pyramid population, birth size given time. age pyramid can plotted, visualization individuals birth size, starting defining discrete birth sizes subgroups, assigning color subgroup. ?plot.pyramid allows user plot age pyramid given time population composed several subgroups, given age pyramid column named group_name (needed displaying several subgroups).  Due interaction individuals, bigger individuals survive higher ages. Several age pyramids different times can computed similarly different times calling ?age_pyramids.","code":"params_death$g <- 0.3 sim_out <- popsim(model = model,   initial_population = pop_init,   events_bounds = c('birth'=birth_intensity_max, 'death'=interaction_fun_max),   parameters = c(params_birth, params_death),   age_max = 2,   time = T) pop_out <- sim_out$population ggplot(pop_out) +   geom_segment(aes(x=birth, xend=death, y=birth_size, yend=birth_size),                na.rm=TRUE, colour=\"blue\", alpha=0.1) +   xlab(\"Time\") + ylab(\"Birth size\") pyr <- age_pyramid(pop_out, ages = seq(0,2,by=0.2), time = 500) head(pyr) ##         age birth_size value ## 1   0 - 0.2   2.508938     2 ## 2 0.2 - 0.4   2.508938     1 ## 3 0.4 - 0.6   2.508938     0 ## 4 0.6 - 0.8   2.508938     0 ## 5   0.8 - 1   2.508938     0 ## 6   1 - 1.2   2.508938     1 pyr$group_name <- as.character(cut(pyr$birth_size+1e-6, breaks = seq(0,4,by=0.25))) head(pyr) ##         age birth_size value group_name ## 1   0 - 0.2   2.508938     2 (2.5,2.75] ## 2 0.2 - 0.4   2.508938     1 (2.5,2.75] ## 3 0.4 - 0.6   2.508938     0 (2.5,2.75] ## 4 0.6 - 0.8   2.508938     0 (2.5,2.75] ## 5   0.8 - 1   2.508938     0 (2.5,2.75] ## 6   1 - 1.2   2.508938     1 (2.5,2.75] library(colorspace) lbls <- sort(unique(pyr$group_name)) # Attribution of a color to each subgroup colors <- c(diverging_hcl(n=length(lbls), palette = \"Red-Green\")) names(colors) <- lbls plot(pyr, group_colors = colors, group_legend = 'Birth size') pyrs <- age_pyramids(pop_out, ages = seq(0,2,by=0.2), time = 50:500) pyrs$group_name <- as.character(cut(pyrs$birth_size+1e-6, breaks = seq(0,4,by=0.25))) lbls <- sort(unique(pyrs$group_name)) colors <- c(diverging_hcl(n=length(lbls), palette = \"Red-Green\")) names(colors) <- lbls  # Only working for html render of the vignette # library(gganimate) # anim <- plot(pyrs, group_colors = colors, group_legend = 'Birth size') + #             transition_time(time) + #             labs(title = \"Time: {frame_time}\")  # animate(anim, nframes = 450, fps = 10)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"increase-in-initial-population-size","dir":"Articles","previous_headings":"6 Simulation with different parameters","what":"Increase in initial population size","title":"Population with genetically variable traits","text":"can simulation bigger initial population. order population size stay approximately constant, birth (resp. death) intensity increased (resp. decreased). birth intensity bound interaction function bound must updated simulation.","code":"N <- 2000 pop_df_init_big <- data.frame(   \"birth\" = -runif(N, agemin, agemax), # Age of each individual chosen uniformly in [0,2]   \"death\" = as.double(NA),   \"birth_size\" = x0 # All individuals have initially the same birth size x0. ) pop_init_big <- population(pop_df_init_big) params_birth$alpha <- 4 params_birth$p <- 0.01 # Mutation probability params_death$beta <- 1/100 params_death$g <- 1 birth_intensity_max <- 4*params_birth$alpha interaction_fun_max <-  params_death$beta sim_out <- popsim(   model = model,   initial_population = pop_init_big,   events_bounds = c('birth'=birth_intensity_max, 'death'=interaction_fun_max),   parameters = c(params_birth, params_death),   age_max = 2,   time = T) pop_size <- nrow(population_alive(sim_out$population, t = 500)) pop_size ## [1] 498 ggplot(sim_out$population) +   geom_segment(aes(x=birth, xend=death, y=birth_size, yend=birth_size),                na.rm=TRUE, colour=\"blue\", alpha=0.1) +   xlab(\"Time\") +   ylab(\"Birth size\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/articles/IBMPopSim_interaction.html","id":"model-with-full-simulation-algorithm","dir":"Articles","previous_headings":"","what":"Model with “full” simulation algorithm","title":"Population with genetically variable traits","text":"presence interactions, randomized algorithm (activated default ?mk_event_interaction) much faster standard algorithm (named full) requires iterate population vector candidate event time.","code":"# Comparison full vs random death_event_full <- mk_event_interaction(type = \"death\",   interaction_type= \"full\",   interaction_code = \"double x_I = I.birth_size + g * age(I,t);                       double x_J = J.birth_size + g * age(J,t);                       result = beta * ( 1.- 1./(1. + c * exp(-4. * (x_I-x_J))));\" ) model_full <- mk_model(characteristics = get_characteristics(pop_init),     events = list(birth_event, death_event_full),     parameters = c(params_birth, params_death)) sim_out_full <- popsim(model = model_full,   initial_population = pop_init_big,   events_bounds = c('birth' = birth_intensity_max, 'death' =interaction_fun_max),   parameters = c(params_birth, params_death),   age_max = 2,   time = T) sim_out_full$logs[\"duration_ns\"]/sim_out$logs[\"duration_ns\"] ## duration_ns  ##    195.6255"},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daphné Giorgi. Author, maintainer. Sarah Kaakai. Author. Vincent Lemaire. Author.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Giorgi D, Kaakai S, Lemaire V (2024). IBMPopSim: Individual Based Model Population Simulation. R package version 1.1.0, https://daphnegiorgi.github.io/IBMPopSim/, https://github.com/daphnegiorgi/IBMPopSim.","code":"@Manual{,   title = {IBMPopSim: Individual Based Model Population Simulation},   author = {Daphné Giorgi and Sarah Kaakai and Vincent Lemaire},   year = {2024},   note = {R package version 1.1.0, https://daphnegiorgi.github.io/IBMPopSim/},   url = {https://github.com/daphnegiorgi/IBMPopSim}, }"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/index.html","id":"ibmpopsim-","dir":"","previous_headings":"","what":"Individual Based Model Population Simulation","title":"Individual Based Model Population Simulation","text":"IBMPopSim package aims simulating random evolution heterogeneous populations, called stochastic Individual Based Models (IBMs). models wide range applications various fields including actuarial sciences, biology, demography, ecology. instance, IBMs can used simulating evolution heterogeneous insurance portfolio, spatial ecological population interacting individuals, validation mortality forecasts. package allows users simulate population evolution individuals characterized age characteristics, population modified different types events including births/arrivals, death/exit events, changes characteristics. frequency event can occur individual can depend age characteristics, also time rest population (interactions). IBMPopSim overcomes limitations time consuming IBMs simulations. done implementing new efficient algorithms based thinning methods, compiled using Rcpp library. package allows wide range IMBs simulated, user-friendly thanks structure based simple build blocks. addition, provide tools analyzing outputs, age-pyramids life tables obtained simulated data, consistent data format packages mortality modeling StMoMo. See vignette(IBMPopSim) details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Individual Based Model Population Simulation","text":"latest stable version can installed CRAN: latest development version can installed github:","code":"install.packages('IBMPopSim') # install.packages(\"devtools\") devtools::install_github('DaphneGiorgi/IBMPopSim')"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/index.html","id":"first-example-to-check-installation","dir":"","previous_headings":"Installation","what":"First example to check installation","title":"Individual Based Model Population Simulation","text":"illustrate use package check installation, simple model Poisson arrivals exits implemented. errors C++ built environment compatible package. model created C++ code compiled. simulation done using popsim function.","code":"library(IBMPopSim)  init_size <- 100000 pop <- population(data.frame(birth = rep(0, init_size), death = NA))  birth = mk_event_poisson(type = 'birth', intensity = 'lambda') death = mk_event_poisson(type = 'death', intensity = 'mu') params = list('lambda' = 100, 'mu' = 100)  # mk_model compiles C++ code using sourceCpp from Rcpp birth_death <- mk_model(events = list(birth, death),                         parameters = params) sim_out <- popsim(model = birth_death,                    initial_population = pop,                    events_bounds = c('birth' = params$lambda, 'death' = params$mu),                   parameters = params,                    time = 10)  num_births <- length(sim_out$population$birth) - init_size num_deaths <- sum(!is.na(sim_out$population$death)) print(c(\"births\" = num_births, \"deaths\" = num_deaths)) ## births deaths  ##    952    981"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/index.html","id":"quick-model-creation","dir":"","previous_headings":"","what":"Quick model creation","title":"Individual Based Model Population Simulation","text":"take initial population, stored data frame, composed 100 000 individuals marked gender (encoded Boolean characteristic): second step define model parameters’ list: last step defined events can occur population, birth death events: Note events contain C++ statements depend (implicitly) previously declared parameters variable params. Finally, model created calling function mk_model. C++ source code obtained events parameters, compiled using sourceCpp function Rcpp package. order simulate random trajectory population given time T bounds events intensities specified: , function popsim can called: data frame sim_out$population contains information (date birth, date death, gender) individuals lived population period [0, 30]. Functions package allows provide aggregated information population. Note parameters model can changed without recompiling model.","code":"pop <- population(EW_pop_14$sample) params <- list(\"alpha\" = 0.008, \"beta\" = 0.02, \"p_male\" = 0.51,                \"birth_rate\" = stepfun(c(15,40), c(0,0.05,0))) death_event <- mk_event_individual(type = \"death\",                   intensity_code = \"result = alpha * exp(beta * age(I, t));\")  birth_event <- mk_event_individual(type = \"birth\",                    intensity_code = \"result = birth_rate(age(I,t));\",                   kernel_code = \"newI.male = CUnif(0, 1) < p_male;\") model <- mk_model(characteristics = get_characteristics(pop),                     events = list(death_event, birth_event),                     parameters = params) a_max <- 115 events_bounds = c(\"death\" = params$alpha * exp(params$beta * a_max),                   \"birth\" = max(params$birth_rate)) sim_out <- popsim(model, pop, events_bounds, params,                   age_max = a_max, time = 30) pop_out <- sim_out$population head(pop_out) ##       birth death  male ## 1 -84.96043    NA FALSE ## 2 -84.86327    NA FALSE ## 3 -84.84161    NA FALSE ## 4 -84.79779    NA FALSE ## 5 -84.76461    NA FALSE ## 6 -84.76363    NA FALSE female_pop <- pop_out[pop_out$male==FALSE, ] age_pyramid(female_pop, ages = 85:90, time = 30) ##       age  male value ## 1 85 - 86 FALSE   224 ## 2 86 - 87 FALSE   250 ## 3 87 - 88 FALSE   213 ## 4 88 - 89 FALSE   170 ## 5 89 - 90 FALSE   180 Dxt <- death_table(female_pop, ages = 85:90, period = 20:30) Ext <- exposure_table(female_pop, ages = 85:90, period = 20:30) params$beta <- 0.01  # Update death event bound: events_bounds[\"death\"] <- params$alpha * exp(params$beta * a_max)  sim_out <- popsim(model, pop, events_bounds, params,                   age_max = a_max, time = 30)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_popIMD_14.html","id":null,"dir":"Reference","previous_headings":"","what":"England and Wales (EW) 2014 population and death rates by Index of Multiple Deprivation (IMD). — EW_popIMD_14","title":"England and Wales (EW) 2014 population and death rates by Index of Multiple Deprivation (IMD). — EW_popIMD_14","text":"EW population, death rates age, gender IMD year 2014 (Source: Office National Statistics, reference number 006518).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_popIMD_14.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"England and Wales (EW) 2014 population and death rates by Index of Multiple Deprivation (IMD). — EW_popIMD_14","text":"","code":"EW_popIMD_14"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_popIMD_14.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"England and Wales (EW) 2014 population and death rates by Index of Multiple Deprivation (IMD). — EW_popIMD_14","text":"list containing: age_pyramid Data frame containing EW age pyramid year 2014, gender, IMD single year age (0-115). Individuals age class 90+ distributed single year age classes EW population. death_rates List containing 4 fields: male Male death rates data frame, IMD single year age (0-90+). female Female death rates dataframe, IMD single year age (0-90+). sample Population dataframe composed 100 000 individuals, sampled age_pyramid.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_pop_14.html","id":null,"dir":"Reference","previous_headings":"","what":"England and Wales (EW) 2014 population, death and birth rates. — EW_pop_14","title":"England and Wales (EW) 2014 population, death and birth rates. — EW_pop_14","text":"EW 2014 population death rates age  gender  (Source: Office National Statistics, reference number 006518). Female birth rates age mother (Source: Office National Statistics birth summary tables).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_pop_14.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"England and Wales (EW) 2014 population, death and birth rates. — EW_pop_14","text":"","code":"EW_pop_14"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_pop_14.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"England and Wales (EW) 2014 population, death and birth rates. — EW_pop_14","text":"list containing: age_pyramid Data frame containing EW age pyramid year 2014, gender single year age (0-115). rates list containing three data frames: birth Birth rates data frame, age mother 5 years age groups. death_male Male death rates data frame, single year age (0-90+). death_female Female death rates dataframe, single year age (0-90+). sample Population dataframe composed 100 000 individuals, sampled age_pyramid.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_pop_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of ","title":"Example of ","text":"Example \"human population\"  data frame 100 years simulation, based sample England Wales 2014 population demographic rates.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_pop_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of ","text":"","code":"EW_pop_out"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EW_pop_out.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of ","text":"Data frame containing population structured age gender, simulated initial population 100 000 individuals sampled EW_pop_14$age_pyramid 100 years, birth death events.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EWdata_hmd.html","id":null,"dir":"Reference","previous_headings":"","what":"England and Wale mortality data (source: Human Mortality Database) — EWdata_hmd","title":"England and Wale mortality data (source: Human Mortality Database) — EWdata_hmd","text":"Obtained EWdata_hmd <- hmd.mx(country = \"GBRTENW\", username = ... , password = ...,label = \"England Wales\")","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EWdata_hmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"England and Wale mortality data (source: Human Mortality Database) — EWdata_hmd","text":"","code":"EWdata_hmd"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/EWdata_hmd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"England and Wale mortality data (source: Human Mortality Database) — EWdata_hmd","text":"object class demogdata length 7.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/IBMPopSim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"IBMPopSim: Individual Based Model Population Simulation — IBMPopSim-package","title":"IBMPopSim: Individual Based Model Population Simulation — IBMPopSim-package","text":"Simulation random evolution heterogeneous populations using stochastic Individual-Based Models (IBMs) doi:10.48550/arXiv.2303.06183 . package enables users simulate population evolution, individuals characterized age characteristics, population modified different types events, including births/arrivals, death/exit events, changes characteristics. frequency event can occur individual can depend age characteristics, also characteristics individuals (interactions). models wide range applications. instance, IBMs can used simulating evolution heterogeneous insurance portfolio selection validating mortality forecasts. package overcomes limitations time-consuming IBMs simulations implementing new efficient algorithms based thinning methods, compiled using 'Rcpp' package providing user-friendly interface.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/IBMPopSim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IBMPopSim: Individual Based Model Population Simulation — IBMPopSim-package","text":"Maintainer: Daphné Giorgi daphne.giorgi@sorbonne-universite.fr Authors: Sarah Kaakai sarah.kaakai@univ-lemans.fr Vincent Lemaire vincent.lemaire@sorbonne-universite.fr","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/add_characteristic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for add_characteristic — add_characteristic","title":"Generic method for add_characteristic — add_characteristic","text":"Generic method add_characteristic","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/add_characteristic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for add_characteristic — add_characteristic","text":"","code":"add_characteristic(x, name, value = NA)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/add_characteristic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for add_characteristic — add_characteristic","text":"x object. name Name characteristic add. value Value characteristic. default NA.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/add_characteristic.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Add characteristic to a population — add_characteristic.population","title":"Add characteristic to a population — add_characteristic.population","text":"Add characteristic population","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/add_characteristic.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add characteristic to a population — add_characteristic.population","text":"","code":"# S3 method for class 'population' add_characteristic(x, name, value = NA)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/add_characteristic.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add characteristic to a population — add_characteristic.population","text":"x Object population class representing population. name Name characteristic add. value Value characteristic. default NA.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for age_pyramid — age_pyramid","title":"Generic method for age_pyramid — age_pyramid","text":"Generic method age_pyramid","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for age_pyramid — age_pyramid","text":"","code":"age_pyramid(object, time = 0, ages = c(0:110, Inf), ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for age_pyramid — age_pyramid","text":"object Population. time age pyramid computed instant time. Must numeric greater equal 0. ages (Optional) numeric vector distinct positive values composing age groups. Must increasing order. ... Additional parameters","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for age_pyramid — age_pyramid","text":"object class pyramid containing age pyramid population instant time.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Age pyramid from a population at a given time. — age_pyramid.population","title":"Age pyramid from a population at a given time. — age_pyramid.population","text":"Reduce population containing individuals (characteristics) age-groups data frame (preserving characteristics). function computes number individuals time age group [ages[],ages[+1][, {1,...,N-1}.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age pyramid from a population at a given time. — age_pyramid.population","text":"","code":"# S3 method for class 'population' age_pyramid(object, time = 0, ages = c(0:110, Inf), ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age pyramid from a population at a given time. — age_pyramid.population","text":"object Object population class representing population. time age pyramid computed instant time. Must numeric greater equal 0. ages (Optional) numeric vector distinct positive values composing age groups. Must increasing order. ... Additional parameters","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age pyramid from a population at a given time. — age_pyramid.population","text":"object class pyramid containing age pyramid given population instant time.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramid.population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age pyramid from a population at a given time. — age_pyramid.population","text":"","code":"age_pyramid(population(EW_pop_14$sample), time = 0) #>           age  male value #> 1       0 - 1 FALSE   581 #> 2       1 - 2 FALSE   577 #> 3       2 - 3 FALSE   638 #> 4       3 - 4 FALSE   632 #> 5       4 - 5 FALSE   590 #> 6       5 - 6 FALSE   570 #> 7       6 - 7 FALSE   579 #> 8       7 - 8 FALSE   588 #> 9       8 - 9 FALSE   548 #> 10     9 - 10 FALSE   532 #> 11    10 - 11 FALSE   503 #> 12    11 - 12 FALSE   562 #> 13    12 - 13 FALSE   514 #> 14    13 - 14 FALSE   509 #> 15    14 - 15 FALSE   573 #> 16    15 - 16 FALSE   582 #> 17    16 - 17 FALSE   536 #> 18    17 - 18 FALSE   565 #> 19    18 - 19 FALSE   618 #> 20    19 - 20 FALSE   616 #> 21    20 - 21 FALSE   623 #> 22    21 - 22 FALSE   650 #> 23    22 - 23 FALSE   714 #> 24    23 - 24 FALSE   671 #> 25    24 - 25 FALSE   621 #> 26    25 - 26 FALSE   682 #> 27    26 - 27 FALSE   714 #> 28    27 - 28 FALSE   687 #> 29    28 - 29 FALSE   712 #> 30    29 - 30 FALSE   723 #> 31    30 - 31 FALSE   696 #> 32    31 - 32 FALSE   670 #> 33    32 - 33 FALSE   725 #> 34    33 - 34 FALSE   695 #> 35    34 - 35 FALSE   692 #> 36    35 - 36 FALSE   657 #> 37    36 - 37 FALSE   609 #> 38    37 - 38 FALSE   608 #> 39    38 - 39 FALSE   644 #> 40    39 - 40 FALSE   600 #> 41    40 - 41 FALSE   612 #> 42    41 - 42 FALSE   642 #> 43    42 - 43 FALSE   757 #> 44    43 - 44 FALSE   728 #> 45    44 - 45 FALSE   685 #> 46    45 - 46 FALSE   754 #> 47    46 - 47 FALSE   729 #> 48    47 - 48 FALSE   728 #> 49    48 - 49 FALSE   752 #> 50    49 - 50 FALSE   773 #> 51    50 - 51 FALSE   753 #> 52    51 - 52 FALSE   660 #> 53    52 - 53 FALSE   714 #> 54    53 - 54 FALSE   668 #> 55    54 - 55 FALSE   616 #> 56    55 - 56 FALSE   626 #> 57    56 - 57 FALSE   680 #> 58    57 - 58 FALSE   609 #> 59    58 - 59 FALSE   558 #> 60    59 - 60 FALSE   571 #> 61    60 - 61 FALSE   547 #> 62    61 - 62 FALSE   571 #> 63    62 - 63 FALSE   534 #> 64    63 - 64 FALSE   521 #> 65    64 - 65 FALSE   533 #> 66    65 - 66 FALSE   580 #> 67    66 - 67 FALSE   640 #> 68    67 - 68 FALSE   643 #> 69    68 - 69 FALSE   504 #> 70    69 - 70 FALSE   467 #> 71    70 - 71 FALSE   501 #> 72    71 - 72 FALSE   417 #> 73    72 - 73 FALSE   434 #> 74    73 - 74 FALSE   364 #> 75    74 - 75 FALSE   404 #> 76    75 - 76 FALSE   370 #> 77    76 - 77 FALSE   338 #> 78    77 - 78 FALSE   380 #> 79    78 - 79 FALSE   343 #> 80    79 - 80 FALSE   341 #> 81    80 - 81 FALSE   295 #> 82    81 - 82 FALSE   260 #> 83    82 - 83 FALSE   275 #> 84    83 - 84 FALSE   259 #> 85    84 - 85 FALSE   231 #> 86    85 - 86 FALSE   239 #> 87    86 - 87 FALSE   217 #> 88    87 - 88 FALSE   207 #> 89    88 - 89 FALSE   168 #> 90    89 - 90 FALSE   133 #> 91    90 - 91 FALSE   125 #> 92    91 - 92 FALSE   112 #> 93    92 - 93 FALSE    92 #> 94    93 - 94 FALSE    79 #> 95    94 - 95 FALSE    49 #> 96    95 - 96 FALSE    36 #> 97    96 - 97 FALSE    25 #> 98    97 - 98 FALSE    18 #> 99    98 - 99 FALSE    10 #> 100  99 - 100 FALSE    12 #> 101 100 - 101 FALSE     8 #> 102 101 - 102 FALSE     6 #> 103 102 - 103 FALSE     3 #> 104 103 - 104 FALSE     2 #> 105 104 - 105 FALSE     1 #> 106 105 - 106 FALSE     0 #> 107 106 - 107 FALSE     2 #> 108 107 - 108 FALSE     0 #> 109 108 - 109 FALSE     0 #> 110 109 - 110 FALSE     0 #> 111 110 - Inf FALSE     0 #> 112     0 - 1  TRUE   584 #> 113     1 - 2  TRUE   605 #> 114     2 - 3  TRUE   718 #> 115     3 - 4  TRUE   675 #> 116     4 - 5  TRUE   608 #> 117     5 - 6  TRUE   649 #> 118     6 - 7  TRUE   682 #> 119     7 - 8  TRUE   687 #> 120     8 - 9  TRUE   582 #> 121    9 - 10  TRUE   570 #> 122   10 - 11  TRUE   584 #> 123   11 - 12  TRUE   600 #> 124   12 - 13  TRUE   518 #> 125   13 - 14  TRUE   589 #> 126   14 - 15  TRUE   606 #> 127   15 - 16  TRUE   609 #> 128   16 - 17  TRUE   607 #> 129   17 - 18  TRUE   612 #> 130   18 - 19  TRUE   624 #> 131   19 - 20  TRUE   657 #> 132   20 - 21  TRUE   656 #> 133   21 - 22  TRUE   614 #> 134   22 - 23  TRUE   684 #> 135   23 - 24  TRUE   673 #> 136   24 - 25  TRUE   716 #> 137   25 - 26  TRUE   669 #> 138   26 - 27  TRUE   723 #> 139   27 - 28  TRUE   625 #> 140   28 - 29  TRUE   665 #> 141   29 - 30  TRUE   729 #> 142   30 - 31  TRUE   671 #> 143   31 - 32  TRUE   663 #> 144   32 - 33  TRUE   650 #> 145   33 - 34  TRUE   698 #> 146   34 - 35  TRUE   647 #> 147   35 - 36  TRUE   665 #> 148   36 - 37  TRUE   590 #> 149   37 - 38  TRUE   607 #> 150   38 - 39  TRUE   618 #> 151   39 - 40  TRUE   612 #> 152   40 - 41  TRUE   632 #> 153   41 - 42  TRUE   655 #> 154   42 - 43  TRUE   681 #> 155   43 - 44  TRUE   743 #> 156   44 - 45  TRUE   701 #> 157   45 - 46  TRUE   689 #> 158   46 - 47  TRUE   718 #> 159   47 - 48  TRUE   729 #> 160   48 - 49  TRUE   666 #> 161   49 - 50  TRUE   724 #> 162   50 - 51  TRUE   708 #> 163   51 - 52  TRUE   686 #> 164   52 - 53  TRUE   713 #> 165   53 - 54  TRUE   610 #> 166   54 - 55  TRUE   648 #> 167   55 - 56  TRUE   560 #> 168   56 - 57  TRUE   622 #> 169   57 - 58  TRUE   612 #> 170   58 - 59  TRUE   552 #> 171   59 - 60  TRUE   550 #> 172   60 - 61  TRUE   575 #> 173   61 - 62  TRUE   558 #> 174   62 - 63  TRUE   540 #> 175   63 - 64  TRUE   502 #> 176   64 - 65  TRUE   487 #> 177   65 - 66  TRUE   543 #> 178   66 - 67  TRUE   588 #> 179   67 - 68  TRUE   636 #> 180   68 - 69  TRUE   468 #> 181   69 - 70  TRUE   477 #> 182   70 - 71  TRUE   390 #> 183   71 - 72  TRUE   455 #> 184   72 - 73  TRUE   371 #> 185   73 - 74  TRUE   347 #> 186   74 - 75  TRUE   338 #> 187   75 - 76  TRUE   312 #> 188   76 - 77  TRUE   327 #> 189   77 - 78  TRUE   300 #> 190   78 - 79  TRUE   282 #> 191   79 - 80  TRUE   261 #> 192   80 - 81  TRUE   218 #> 193   81 - 82  TRUE   218 #> 194   82 - 83  TRUE   228 #> 195   83 - 84  TRUE   177 #> 196   84 - 85  TRUE   160 #> 197   85 - 86  TRUE   132 #> 198   86 - 87  TRUE   137 #> 199   87 - 88  TRUE   114 #> 200   88 - 89  TRUE   102 #> 201   89 - 90  TRUE    76 #> 202   90 - 91  TRUE    49 #> 203   91 - 92  TRUE    60 #> 204   92 - 93  TRUE    38 #> 205   93 - 94  TRUE    23 #> 206   94 - 95  TRUE    18 #> 207   95 - 96  TRUE    11 #> 208   96 - 97  TRUE     8 #> 209   97 - 98  TRUE     4 #> 210   98 - 99  TRUE     3 #> 211  99 - 100  TRUE     4 #> 212 100 - 101  TRUE     1 #> 213 101 - 102  TRUE     4 #> 214 102 - 103  TRUE     0 #> 215 103 - 104  TRUE     0 #> 216 104 - 105  TRUE     1 #> 217 105 - 106  TRUE     0 #> 218 106 - 107  TRUE     0 #> 219 107 - 108  TRUE     0 #> 220 108 - 109  TRUE     0 #> 221 109 - 110  TRUE     0 #> 222 110 - Inf  TRUE     0  age_pyramid(population(EW_popIMD_14$sample), time = 0, ages = seq(0, 120, by=2)) #>           age  male IMD value #> 1       0 - 2 FALSE   1   166 #> 2       2 - 4 FALSE   1   203 #> 3       4 - 6 FALSE   1   219 #> 4       6 - 8 FALSE   1   255 #> 5      8 - 10 FALSE   1   203 #> 6     10 - 12 FALSE   1   192 #> 7     12 - 14 FALSE   1   235 #> 8     14 - 16 FALSE   1   239 #> 9     16 - 18 FALSE   1   250 #> 10    18 - 20 FALSE   1   213 #> 11    20 - 22 FALSE   1   186 #> 12    22 - 24 FALSE   1   193 #> 13    24 - 26 FALSE   1   200 #> 14    26 - 28 FALSE   1   171 #> 15    28 - 30 FALSE   1   157 #> 16    30 - 32 FALSE   1   198 #> 17    32 - 34 FALSE   1   227 #> 18    34 - 36 FALSE   1   255 #> 19    36 - 38 FALSE   1   216 #> 20    38 - 40 FALSE   1   238 #> 21    40 - 42 FALSE   1   272 #> 22    42 - 44 FALSE   1   304 #> 23    44 - 46 FALSE   1   315 #> 24    46 - 48 FALSE   1   304 #> 25    48 - 50 FALSE   1   307 #> 26    50 - 52 FALSE   1   338 #> 27    52 - 54 FALSE   1   289 #> 28    54 - 56 FALSE   1   274 #> 29    56 - 58 FALSE   1   246 #> 30    58 - 60 FALSE   1   255 #> 31    60 - 62 FALSE   1   233 #> 32    62 - 64 FALSE   1   240 #> 33    64 - 66 FALSE   1   260 #> 34    66 - 68 FALSE   1   333 #> 35    68 - 70 FALSE   1   245 #> 36    70 - 72 FALSE   1   239 #> 37    72 - 74 FALSE   1   164 #> 38    74 - 76 FALSE   1   158 #> 39    76 - 78 FALSE   1   152 #> 40    78 - 80 FALSE   1   143 #> 41    80 - 82 FALSE   1   142 #> 42    82 - 84 FALSE   1   121 #> 43    84 - 86 FALSE   1   107 #> 44    86 - 88 FALSE   1    83 #> 45    88 - 90 FALSE   1    58 #> 46    90 - 92 FALSE   1    49 #> 47    92 - 94 FALSE   1    48 #> 48    94 - 96 FALSE   1    21 #> 49    96 - 98 FALSE   1     9 #> 50   98 - 100 FALSE   1     4 #> 51  100 - 102 FALSE   1     2 #> 52  102 - 104 FALSE   1     6 #> 53  104 - 106 FALSE   1     0 #> 54  106 - 108 FALSE   1     0 #> 55  108 - 110 FALSE   1     0 #> 56  110 - 112 FALSE   1     0 #> 57  112 - 114 FALSE   1     0 #> 58  114 - 116 FALSE   1     0 #> 59  116 - 118 FALSE   1     0 #> 60  118 - 120 FALSE   1     0 #> 61      0 - 2  TRUE   1   203 #> 62      2 - 4  TRUE   1   243 #> 63      4 - 6  TRUE   1   219 #> 64      6 - 8  TRUE   1   256 #> 65     8 - 10  TRUE   1   208 #> 66    10 - 12  TRUE   1   212 #> 67    12 - 14  TRUE   1   205 #> 68    14 - 16  TRUE   1   237 #> 69    16 - 18  TRUE   1   259 #> 70    18 - 20  TRUE   1   213 #> 71    20 - 22  TRUE   1   224 #> 72    22 - 24  TRUE   1   205 #> 73    24 - 26  TRUE   1   202 #> 74    26 - 28  TRUE   1   183 #> 75    28 - 30  TRUE   1   171 #> 76    30 - 32  TRUE   1   177 #> 77    32 - 34  TRUE   1   221 #> 78    34 - 36  TRUE   1   183 #> 79    36 - 38  TRUE   1   212 #> 80    38 - 40  TRUE   1   224 #> 81    40 - 42  TRUE   1   255 #> 82    42 - 44  TRUE   1   255 #> 83    44 - 46  TRUE   1   278 #> 84    46 - 48  TRUE   1   315 #> 85    48 - 50  TRUE   1   293 #> 86    50 - 52  TRUE   1   302 #> 87    52 - 54  TRUE   1   307 #> 88    54 - 56  TRUE   1   265 #> 89    56 - 58  TRUE   1   280 #> 90    58 - 60  TRUE   1   257 #> 91    60 - 62  TRUE   1   218 #> 92    62 - 64  TRUE   1   236 #> 93    64 - 66  TRUE   1   259 #> 94    66 - 68  TRUE   1   269 #> 95    68 - 70  TRUE   1   219 #> 96    70 - 72  TRUE   1   192 #> 97    72 - 74  TRUE   1   159 #> 98    74 - 76  TRUE   1   158 #> 99    76 - 78  TRUE   1   126 #> 100   78 - 80  TRUE   1   107 #> 101   80 - 82  TRUE   1   120 #> 102   82 - 84  TRUE   1   107 #> 103   84 - 86  TRUE   1    83 #> 104   86 - 88  TRUE   1    56 #> 105   88 - 90  TRUE   1    44 #> 106   90 - 92  TRUE   1    24 #> 107   92 - 94  TRUE   1    14 #> 108   94 - 96  TRUE   1    12 #> 109   96 - 98  TRUE   1     2 #> 110  98 - 100  TRUE   1     1 #> 111 100 - 102  TRUE   1     0 #> 112 102 - 104  TRUE   1     1 #> 113 104 - 106  TRUE   1     0 #> 114 106 - 108  TRUE   1     0 #> 115 108 - 110  TRUE   1     0 #> 116 110 - 112  TRUE   1     0 #> 117 112 - 114  TRUE   1     0 #> 118 114 - 116  TRUE   1     0 #> 119 116 - 118  TRUE   1     0 #> 120 118 - 120  TRUE   1     0 #> 121     0 - 2 FALSE   2   217 #> 122     2 - 4 FALSE   2   240 #> 123     4 - 6 FALSE   2   228 #> 124     6 - 8 FALSE   2   205 #> 125    8 - 10 FALSE   2   216 #> 126   10 - 12 FALSE   2   240 #> 127   12 - 14 FALSE   2   184 #> 128   14 - 16 FALSE   2   204 #> 129   16 - 18 FALSE   2   226 #> 130   18 - 20 FALSE   2   218 #> 131   20 - 22 FALSE   2   186 #> 132   22 - 24 FALSE   2   247 #> 133   24 - 26 FALSE   2   217 #> 134   26 - 28 FALSE   2   217 #> 135   28 - 30 FALSE   2   223 #> 136   30 - 32 FALSE   2   252 #> 137   32 - 34 FALSE   2   274 #> 138   34 - 36 FALSE   2   248 #> 139   36 - 38 FALSE   2   227 #> 140   38 - 40 FALSE   2   248 #> 141   40 - 42 FALSE   2   266 #> 142   42 - 44 FALSE   2   279 #> 143   44 - 46 FALSE   2   294 #> 144   46 - 48 FALSE   2   293 #> 145   48 - 50 FALSE   2   324 #> 146   50 - 52 FALSE   2   321 #> 147   52 - 54 FALSE   2   324 #> 148   54 - 56 FALSE   2   284 #> 149   56 - 58 FALSE   2   244 #> 150   58 - 60 FALSE   2   238 #> 151   60 - 62 FALSE   2   264 #> 152   62 - 64 FALSE   2   243 #> 153   64 - 66 FALSE   2   274 #> 154   66 - 68 FALSE   2   278 #> 155   68 - 70 FALSE   2   221 #> 156   70 - 72 FALSE   2   241 #> 157   72 - 74 FALSE   2   161 #> 158   74 - 76 FALSE   2   150 #> 159   76 - 78 FALSE   2   161 #> 160   78 - 80 FALSE   2   141 #> 161   80 - 82 FALSE   2   133 #> 162   82 - 84 FALSE   2   119 #> 163   84 - 86 FALSE   2   107 #> 164   86 - 88 FALSE   2    97 #> 165   88 - 90 FALSE   2    75 #> 166   90 - 92 FALSE   2    48 #> 167   92 - 94 FALSE   2    38 #> 168   94 - 96 FALSE   2    19 #> 169   96 - 98 FALSE   2     4 #> 170  98 - 100 FALSE   2     4 #> 171 100 - 102 FALSE   2     2 #> 172 102 - 104 FALSE   2     0 #> 173 104 - 106 FALSE   2     0 #> 174 106 - 108 FALSE   2     0 #> 175 108 - 110 FALSE   2     0 #> 176 110 - 112 FALSE   2     0 #> 177 112 - 114 FALSE   2     0 #> 178 114 - 116 FALSE   2     0 #> 179 116 - 118 FALSE   2     0 #> 180 118 - 120 FALSE   2     0 #> 181     0 - 2  TRUE   2   208 #> 182     2 - 4  TRUE   2   240 #> 183     4 - 6  TRUE   2   250 #> 184     6 - 8  TRUE   2   202 #> 185    8 - 10  TRUE   2   234 #> 186   10 - 12  TRUE   2   207 #> 187   12 - 14  TRUE   2   204 #> 188   14 - 16  TRUE   2   226 #> 189   16 - 18  TRUE   2   234 #> 190   18 - 20  TRUE   2   241 #> 191   20 - 22  TRUE   2   266 #> 192   22 - 24  TRUE   2   254 #> 193   24 - 26  TRUE   2   241 #> 194   26 - 28  TRUE   2   231 #> 195   28 - 30  TRUE   2   241 #> 196   30 - 32  TRUE   2   221 #> 197   32 - 34  TRUE   2   252 #> 198   34 - 36  TRUE   2   245 #> 199   36 - 38  TRUE   2   221 #> 200   38 - 40  TRUE   2   219 #> 201   40 - 42  TRUE   2   242 #> 202   42 - 44  TRUE   2   311 #> 203   44 - 46  TRUE   2   278 #> 204   46 - 48  TRUE   2   293 #> 205   48 - 50  TRUE   2   326 #> 206   50 - 52  TRUE   2   282 #> 207   52 - 54  TRUE   2   273 #> 208   54 - 56  TRUE   2   261 #> 209   56 - 58  TRUE   2   258 #> 210   58 - 60  TRUE   2   241 #> 211   60 - 62  TRUE   2   225 #> 212   62 - 64  TRUE   2   242 #> 213   64 - 66  TRUE   2   236 #> 214   66 - 68  TRUE   2   250 #> 215   68 - 70  TRUE   2   197 #> 216   70 - 72  TRUE   2   177 #> 217   72 - 74  TRUE   2   145 #> 218   74 - 76  TRUE   2   157 #> 219   76 - 78  TRUE   2   142 #> 220   78 - 80  TRUE   2   127 #> 221   80 - 82  TRUE   2   118 #> 222   82 - 84  TRUE   2    89 #> 223   84 - 86  TRUE   2    75 #> 224   86 - 88  TRUE   2    55 #> 225   88 - 90  TRUE   2    48 #> 226   90 - 92  TRUE   2    29 #> 227   92 - 94  TRUE   2    15 #> 228   94 - 96  TRUE   2     3 #> 229   96 - 98  TRUE   2     6 #> 230  98 - 100  TRUE   2     2 #> 231 100 - 102  TRUE   2     0 #> 232 102 - 104  TRUE   2     0 #> 233 104 - 106  TRUE   2     0 #> 234 106 - 108  TRUE   2     0 #> 235 108 - 110  TRUE   2     1 #> 236 110 - 112  TRUE   2     0 #> 237 112 - 114  TRUE   2     0 #> 238 114 - 116  TRUE   2     0 #> 239 116 - 118  TRUE   2     0 #> 240 118 - 120  TRUE   2     0 #> 241     0 - 2 FALSE   3   220 #> 242     2 - 4 FALSE   3   200 #> 243     4 - 6 FALSE   3   243 #> 244     6 - 8 FALSE   3   237 #> 245    8 - 10 FALSE   3   213 #> 246   10 - 12 FALSE   3   176 #> 247   12 - 14 FALSE   3   216 #> 248   14 - 16 FALSE   3   228 #> 249   16 - 18 FALSE   3   238 #> 250   18 - 20 FALSE   3   212 #> 251   20 - 22 FALSE   3   257 #> 252   22 - 24 FALSE   3   287 #> 253   24 - 26 FALSE   3   263 #> 254   26 - 28 FALSE   3   252 #> 255   28 - 30 FALSE   3   267 #> 256   30 - 32 FALSE   3   255 #> 257   32 - 34 FALSE   3   254 #> 258   34 - 36 FALSE   3   324 #> 259   36 - 38 FALSE   3   243 #> 260   38 - 40 FALSE   3   243 #> 261   40 - 42 FALSE   3   255 #> 262   42 - 44 FALSE   3   296 #> 263   44 - 46 FALSE   3   252 #> 264   46 - 48 FALSE   3   275 #> 265   48 - 50 FALSE   3   324 #> 266   50 - 52 FALSE   3   297 #> 267   52 - 54 FALSE   3   281 #> 268   54 - 56 FALSE   3   256 #> 269   56 - 58 FALSE   3   240 #> 270   58 - 60 FALSE   3   239 #> 271   60 - 62 FALSE   3   262 #> 272   62 - 64 FALSE   3   249 #> 273   64 - 66 FALSE   3   231 #> 274   66 - 68 FALSE   3   290 #> 275   68 - 70 FALSE   3   207 #> 276   70 - 72 FALSE   3   177 #> 277   72 - 74 FALSE   3   176 #> 278   74 - 76 FALSE   3   171 #> 279   76 - 78 FALSE   3   151 #> 280   78 - 80 FALSE   3   151 #> 281   80 - 82 FALSE   3   138 #> 282   82 - 84 FALSE   3   112 #> 283   84 - 86 FALSE   3   108 #> 284   86 - 88 FALSE   3    78 #> 285   88 - 90 FALSE   3    74 #> 286   90 - 92 FALSE   3    67 #> 287   92 - 94 FALSE   3    37 #> 288   94 - 96 FALSE   3    23 #> 289   96 - 98 FALSE   3    14 #> 290  98 - 100 FALSE   3    11 #> 291 100 - 102 FALSE   3     3 #> 292 102 - 104 FALSE   3     3 #> 293 104 - 106 FALSE   3     1 #> 294 106 - 108 FALSE   3     0 #> 295 108 - 110 FALSE   3     0 #> 296 110 - 112 FALSE   3     0 #> 297 112 - 114 FALSE   3     0 #> 298 114 - 116 FALSE   3     0 #> 299 116 - 118 FALSE   3     0 #> 300 118 - 120 FALSE   3     0 #> 301     0 - 2  TRUE   3   219 #> 302     2 - 4  TRUE   3   255 #> 303     4 - 6  TRUE   3   207 #> 304     6 - 8  TRUE   3   258 #> 305    8 - 10  TRUE   3   214 #> 306   10 - 12  TRUE   3   187 #> 307   12 - 14  TRUE   3   205 #> 308   14 - 16  TRUE   3   193 #> 309   16 - 18  TRUE   3   256 #> 310   18 - 20  TRUE   3   234 #> 311   20 - 22  TRUE   3   246 #> 312   22 - 24  TRUE   3   286 #> 313   24 - 26  TRUE   3   261 #> 314   26 - 28  TRUE   3   287 #> 315   28 - 30  TRUE   3   268 #> 316   30 - 32  TRUE   3   275 #> 317   32 - 34  TRUE   3   297 #> 318   34 - 36  TRUE   3   286 #> 319   36 - 38  TRUE   3   232 #> 320   38 - 40  TRUE   3   245 #> 321   40 - 42  TRUE   3   267 #> 322   42 - 44  TRUE   3   263 #> 323   44 - 46  TRUE   3   277 #> 324   46 - 48  TRUE   3   260 #> 325   48 - 50  TRUE   3   297 #> 326   50 - 52  TRUE   3   270 #> 327   52 - 54  TRUE   3   240 #> 328   54 - 56  TRUE   3   222 #> 329   56 - 58  TRUE   3   259 #> 330   58 - 60  TRUE   3   223 #> 331   60 - 62  TRUE   3   222 #> 332   62 - 64  TRUE   3   238 #> 333   64 - 66  TRUE   3   226 #> 334   66 - 68  TRUE   3   270 #> 335   68 - 70  TRUE   3   197 #> 336   70 - 72  TRUE   3   180 #> 337   72 - 74  TRUE   3   171 #> 338   74 - 76  TRUE   3   150 #> 339   76 - 78  TRUE   3   163 #> 340   78 - 80  TRUE   3    90 #> 341   80 - 82  TRUE   3   113 #> 342   82 - 84  TRUE   3    72 #> 343   84 - 86  TRUE   3    70 #> 344   86 - 88  TRUE   3    52 #> 345   88 - 90  TRUE   3    33 #> 346   90 - 92  TRUE   3    22 #> 347   92 - 94  TRUE   3    17 #> 348   94 - 96  TRUE   3     8 #> 349   96 - 98  TRUE   3     2 #> 350  98 - 100  TRUE   3     2 #> 351 100 - 102  TRUE   3     0 #> 352 102 - 104  TRUE   3     0 #> 353 104 - 106  TRUE   3     0 #> 354 106 - 108  TRUE   3     0 #> 355 108 - 110  TRUE   3     0 #> 356 110 - 112  TRUE   3     0 #> 357 112 - 114  TRUE   3     0 #> 358 114 - 116  TRUE   3     0 #> 359 116 - 118  TRUE   3     0 #> 360 118 - 120  TRUE   3     0 #> 361     0 - 2 FALSE   4   262 #> 362     2 - 4 FALSE   4   300 #> 363     4 - 6 FALSE   4   263 #> 364     6 - 8 FALSE   4   264 #> 365    8 - 10 FALSE   4   213 #> 366   10 - 12 FALSE   4   217 #> 367   12 - 14 FALSE   4   204 #> 368   14 - 16 FALSE   4   213 #> 369   16 - 18 FALSE   4   237 #> 370   18 - 20 FALSE   4   262 #> 371   20 - 22 FALSE   4   276 #> 372   22 - 24 FALSE   4   313 #> 373   24 - 26 FALSE   4   354 #> 374   26 - 28 FALSE   4   331 #> 375   28 - 30 FALSE   4   315 #> 376   30 - 32 FALSE   4   320 #> 377   32 - 34 FALSE   4   341 #> 378   34 - 36 FALSE   4   304 #> 379   36 - 38 FALSE   4   280 #> 380   38 - 40 FALSE   4   258 #> 381   40 - 42 FALSE   4   249 #> 382   42 - 44 FALSE   4   266 #> 383   44 - 46 FALSE   4   289 #> 384   46 - 48 FALSE   4   271 #> 385   48 - 50 FALSE   4   255 #> 386   50 - 52 FALSE   4   270 #> 387   52 - 54 FALSE   4   292 #> 388   54 - 56 FALSE   4   250 #> 389   56 - 58 FALSE   4   250 #> 390   58 - 60 FALSE   4   222 #> 391   60 - 62 FALSE   4   194 #> 392   62 - 64 FALSE   4   214 #> 393   64 - 66 FALSE   4   182 #> 394   66 - 68 FALSE   4   209 #> 395   68 - 70 FALSE   4   178 #> 396   70 - 72 FALSE   4   172 #> 397   72 - 74 FALSE   4   138 #> 398   74 - 76 FALSE   4   145 #> 399   76 - 78 FALSE   4   133 #> 400   78 - 80 FALSE   4   121 #> 401   80 - 82 FALSE   4   106 #> 402   82 - 84 FALSE   4    95 #> 403   84 - 86 FALSE   4    85 #> 404   86 - 88 FALSE   4    64 #> 405   88 - 90 FALSE   4    60 #> 406   90 - 92 FALSE   4    45 #> 407   92 - 94 FALSE   4    39 #> 408   94 - 96 FALSE   4    11 #> 409   96 - 98 FALSE   4     8 #> 410  98 - 100 FALSE   4     4 #> 411 100 - 102 FALSE   4     2 #> 412 102 - 104 FALSE   4     0 #> 413 104 - 106 FALSE   4     0 #> 414 106 - 108 FALSE   4     0 #> 415 108 - 110 FALSE   4     1 #> 416 110 - 112 FALSE   4     0 #> 417 112 - 114 FALSE   4     0 #> 418 114 - 116 FALSE   4     0 #> 419 116 - 118 FALSE   4     0 #> 420 118 - 120 FALSE   4     0 #> 421     0 - 2  TRUE   4   263 #> 422     2 - 4  TRUE   4   313 #> 423     4 - 6  TRUE   4   267 #> 424     6 - 8  TRUE   4   259 #> 425    8 - 10  TRUE   4   261 #> 426   10 - 12  TRUE   4   219 #> 427   12 - 14  TRUE   4   213 #> 428   14 - 16  TRUE   4   239 #> 429   16 - 18  TRUE   4   224 #> 430   18 - 20  TRUE   4   251 #> 431   20 - 22  TRUE   4   320 #> 432   22 - 24  TRUE   4   340 #> 433   24 - 26  TRUE   4   356 #> 434   26 - 28  TRUE   4   317 #> 435   28 - 30  TRUE   4   350 #> 436   30 - 32  TRUE   4   357 #> 437   32 - 34  TRUE   4   341 #> 438   34 - 36  TRUE   4   323 #> 439   36 - 38  TRUE   4   286 #> 440   38 - 40  TRUE   4   271 #> 441   40 - 42  TRUE   4   278 #> 442   42 - 44  TRUE   4   304 #> 443   44 - 46  TRUE   4   289 #> 444   46 - 48  TRUE   4   255 #> 445   48 - 50  TRUE   4   267 #> 446   50 - 52  TRUE   4   282 #> 447   52 - 54  TRUE   4   250 #> 448   54 - 56  TRUE   4   236 #> 449   56 - 58  TRUE   4   215 #> 450   58 - 60  TRUE   4   192 #> 451   60 - 62  TRUE   4   195 #> 452   62 - 64  TRUE   4   200 #> 453   64 - 66  TRUE   4   205 #> 454   66 - 68  TRUE   4   193 #> 455   68 - 70  TRUE   4   159 #> 456   70 - 72  TRUE   4   146 #> 457   72 - 74  TRUE   4   118 #> 458   74 - 76  TRUE   4   114 #> 459   76 - 78  TRUE   4   119 #> 460   78 - 80  TRUE   4    94 #> 461   80 - 82  TRUE   4    72 #> 462   82 - 84  TRUE   4    75 #> 463   84 - 86  TRUE   4    65 #> 464   86 - 88  TRUE   4    44 #> 465   88 - 90  TRUE   4    33 #> 466   90 - 92  TRUE   4    24 #> 467   92 - 94  TRUE   4    19 #> 468   94 - 96  TRUE   4     8 #> 469   96 - 98  TRUE   4     6 #> 470  98 - 100  TRUE   4     1 #> 471 100 - 102  TRUE   4     0 #> 472 102 - 104  TRUE   4     0 #> 473 104 - 106  TRUE   4     0 #> 474 106 - 108  TRUE   4     0 #> 475 108 - 110  TRUE   4     0 #> 476 110 - 112  TRUE   4     0 #> 477 112 - 114  TRUE   4     0 #> 478 114 - 116  TRUE   4     0 #> 479 116 - 118  TRUE   4     0 #> 480 118 - 120  TRUE   4     0 #> 481     0 - 2 FALSE   5   308 #> 482     2 - 4 FALSE   5   353 #> 483     4 - 6 FALSE   5   296 #> 484     6 - 8 FALSE   5   294 #> 485    8 - 10 FALSE   5   264 #> 486   10 - 12 FALSE   5   243 #> 487   12 - 14 FALSE   5   239 #> 488   14 - 16 FALSE   5   259 #> 489   16 - 18 FALSE   5   243 #> 490   18 - 20 FALSE   5   290 #> 491   20 - 22 FALSE   5   276 #> 492   22 - 24 FALSE   5   339 #> 493   24 - 26 FALSE   5   345 #> 494   26 - 28 FALSE   5   354 #> 495   28 - 30 FALSE   5   376 #> 496   30 - 32 FALSE   5   309 #> 497   32 - 34 FALSE   5   304 #> 498   34 - 36 FALSE   5   303 #> 499   36 - 38 FALSE   5   285 #> 500   38 - 40 FALSE   5   246 #> 501   40 - 42 FALSE   5   230 #> 502   42 - 44 FALSE   5   255 #> 503   44 - 46 FALSE   5   259 #> 504   46 - 48 FALSE   5   268 #> 505   48 - 50 FALSE   5   232 #> 506   50 - 52 FALSE   5   241 #> 507   52 - 54 FALSE   5   233 #> 508   54 - 56 FALSE   5   231 #> 509   56 - 58 FALSE   5   194 #> 510   58 - 60 FALSE   5   203 #> 511   60 - 62 FALSE   5   183 #> 512   62 - 64 FALSE   5   153 #> 513   64 - 66 FALSE   5   171 #> 514   66 - 68 FALSE   5   166 #> 515   68 - 70 FALSE   5   130 #> 516   70 - 72 FALSE   5   135 #> 517   72 - 74 FALSE   5   131 #> 518   74 - 76 FALSE   5   116 #> 519   76 - 78 FALSE   5   119 #> 520   78 - 80 FALSE   5    98 #> 521   80 - 82 FALSE   5    87 #> 522   82 - 84 FALSE   5    89 #> 523   84 - 86 FALSE   5    67 #> 524   86 - 88 FALSE   5    59 #> 525   88 - 90 FALSE   5    55 #> 526   90 - 92 FALSE   5    40 #> 527   92 - 94 FALSE   5    26 #> 528   94 - 96 FALSE   5     5 #> 529   96 - 98 FALSE   5     3 #> 530  98 - 100 FALSE   5     5 #> 531 100 - 102 FALSE   5     1 #> 532 102 - 104 FALSE   5     1 #> 533 104 - 106 FALSE   5     0 #> 534 106 - 108 FALSE   5     0 #> 535 108 - 110 FALSE   5     0 #> 536 110 - 112 FALSE   5     0 #> 537 112 - 114 FALSE   5     0 #> 538 114 - 116 FALSE   5     0 #> 539 116 - 118 FALSE   5     0 #> 540 118 - 120 FALSE   5     0 #> 541     0 - 2  TRUE   5   333 #> 542     2 - 4  TRUE   5   325 #> 543     4 - 6  TRUE   5   318 #> 544     6 - 8  TRUE   5   324 #> 545    8 - 10  TRUE   5   269 #> 546   10 - 12  TRUE   5   240 #> 547   12 - 14  TRUE   5   239 #> 548   14 - 16  TRUE   5   273 #> 549   16 - 18  TRUE   5   254 #> 550   18 - 20  TRUE   5   296 #> 551   20 - 22  TRUE   5   281 #> 552   22 - 24  TRUE   5   304 #> 553   24 - 26  TRUE   5   324 #> 554   26 - 28  TRUE   5   326 #> 555   28 - 30  TRUE   5   350 #> 556   30 - 32  TRUE   5   292 #> 557   32 - 34  TRUE   5   315 #> 558   34 - 36  TRUE   5   296 #> 559   36 - 38  TRUE   5   249 #> 560   38 - 40  TRUE   5   291 #> 561   40 - 42  TRUE   5   241 #> 562   42 - 44  TRUE   5   275 #> 563   44 - 46  TRUE   5   320 #> 564   46 - 48  TRUE   5   267 #> 565   48 - 50  TRUE   5   261 #> 566   50 - 52  TRUE   5   256 #> 567   52 - 54  TRUE   5   229 #> 568   54 - 56  TRUE   5   222 #> 569   56 - 58  TRUE   5   205 #> 570   58 - 60  TRUE   5   189 #> 571   60 - 62  TRUE   5   178 #> 572   62 - 64  TRUE   5   173 #> 573   64 - 66  TRUE   5   151 #> 574   66 - 68  TRUE   5   176 #> 575   68 - 70  TRUE   5   141 #> 576   70 - 72  TRUE   5   123 #> 577   72 - 74  TRUE   5   110 #> 578   74 - 76  TRUE   5    93 #> 579   76 - 78  TRUE   5    90 #> 580   78 - 80  TRUE   5    71 #> 581   80 - 82  TRUE   5    78 #> 582   82 - 84  TRUE   5    49 #> 583   84 - 86  TRUE   5    53 #> 584   86 - 88  TRUE   5    40 #> 585   88 - 90  TRUE   5    14 #> 586   90 - 92  TRUE   5    12 #> 587   92 - 94  TRUE   5    13 #> 588   94 - 96  TRUE   5     4 #> 589   96 - 98  TRUE   5     1 #> 590  98 - 100  TRUE   5     1 #> 591 100 - 102  TRUE   5     0 #> 592 102 - 104  TRUE   5     1 #> 593 104 - 106  TRUE   5     0 #> 594 106 - 108  TRUE   5     0 #> 595 108 - 110  TRUE   5     0 #> 596 110 - 112  TRUE   5     0 #> 597 112 - 114  TRUE   5     0 #> 598 114 - 116  TRUE   5     0 #> 599 116 - 118  TRUE   5     0 #> 600 118 - 120  TRUE   5     0"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for age_pyramids — age_pyramids","title":"Generic method for age_pyramids — age_pyramids","text":"Generic method age_pyramids","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for age_pyramids — age_pyramids","text":"","code":"age_pyramids(object, time = 0, ages = c(0:110, Inf))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for age_pyramids — age_pyramids","text":"object Population. time age pyramid computed instant time. Must numeric greater equal 0. ages (Optional) numeric vector distinct positive values composing age groups. Must increasing order.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Age pyramid from a population data frame at some given times. — age_pyramids.population","title":"Age pyramid from a population data frame at some given times. — age_pyramids.population","text":"Vectorial version time function age_pyramid.population. compatible IBMs including swap events.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age pyramid from a population data frame at some given times. — age_pyramids.population","text":"","code":"# S3 method for class 'population' age_pyramids(object, time = 0, ages = c(0:110, Inf))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age pyramid from a population data frame at some given times. — age_pyramids.population","text":"object Object population class representing population. time age pyramid computed instant time. Must numeric greater equal 0. ages (Optional) numeric vector distinct positive values composing age groups. Must increasing order.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/age_pyramids.population.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Age pyramid from a population data frame at some given times. — age_pyramids.population","text":"convenience. just lapply call age_pyramid.population vector time.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — assertCharacteristics","title":"Function for internal use — assertCharacteristics","text":"Check characteristics.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — assertCharacteristics","text":"","code":"assertCharacteristics(characteristics)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertEvents.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — assertEvents","title":"Function for internal use — assertEvents","text":"Check events","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertEvents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — assertEvents","text":"","code":"assertEvents(events)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — assertParameters","title":"Function for internal use — assertParameters","text":"Check parameters.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — assertParameters","text":"","code":"assertParameters(parameters)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertPopulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — assertPopulation","title":"Function for internal use — assertPopulation","text":"Check population.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertPopulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — assertPopulation","text":"","code":"assertPopulation(object)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertPyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — assertPyramid","title":"Function for internal use — assertPyramid","text":"Check pyramid.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/assertPyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — assertPyramid","text":"","code":"assertPyramid(pyramid)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/capitalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — capitalize","title":"Function for internal use — capitalize","text":"Capitalize first letter word","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/capitalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — capitalize","text":"","code":"capitalize(x)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_intensity_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the intensity code. — check_intensity_code","title":"Check the intensity code. — check_intensity_code","text":"Verifies intensity contains string 'result'.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_intensity_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the intensity code. — check_intensity_code","text":"","code":"check_intensity_code(code)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_intensity_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the intensity code. — check_intensity_code","text":"code String containing intensity code.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_interaction_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the interaction code. — check_interaction_code","title":"Check the interaction code. — check_interaction_code","text":"Verifies interaction contains string 'result'.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_interaction_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the interaction code. — check_interaction_code","text":"","code":"check_interaction_code(code)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_interaction_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the interaction code. — check_interaction_code","text":"code String containing interaction code.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_kernel_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the kernel code. — check_kernel_code","title":"Check the kernel code. — check_kernel_code","text":"Verifies kernel code.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_kernel_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the kernel code. — check_kernel_code","text":"","code":"check_kernel_code(code)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/check_kernel_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the kernel code. — check_kernel_code","text":"code String containing kernel code.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/compatibility_chars_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Check characteristics-events compatibility — compatibility_chars_events","title":"Check characteristics-events compatibility — compatibility_chars_events","text":"function check compatibility characteristics events","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/compatibility_chars_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check characteristics-events compatibility — compatibility_chars_events","text":"","code":"compatibility_chars_events(characteristics, events)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/compatibility_chars_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check characteristics-events compatibility — compatibility_chars_events","text":"characteristics List characteristics events List events","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/compatibility_pop_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Check population-model compatibility — compatibility_pop_model","title":"Check population-model compatibility — compatibility_pop_model","text":"function check compatibility population model","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/compatibility_pop_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check population-model compatibility — compatibility_pop_model","text":"","code":"compatibility_pop_model(pop, model)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/compatibility_pop_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check population-model compatibility — compatibility_pop_model","text":"pop object class population model Individual Based Model created mk_model function","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/death_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Death table — death_table","title":"Death table — death_table","text":"Creates death table population object. =1..N-1 j=1..M, number individuals age last birthday [ages[],ages[+1]) died [times[j],times[j+1]) computed.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/death_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Death table — death_table","text":"","code":"death_table(pop, ages, period)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/death_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Death table — death_table","text":"pop Object class population. ages vector size N composed age groups. period vector size M composed time intervals.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/death_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Death table — death_table","text":"death table matrix.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/death_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Death table — death_table","text":"function computes number death time interval [times[j],times[j+1]), j=1..M.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/death_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Death table — death_table","text":"","code":"dth_table <-  death_table(population(EW_pop_out), 0:101, 0:11)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Autogenerate cpp details documentation — details_cpp","title":"Autogenerate cpp details documentation — details_cpp","text":"Autogenerating documentation details cpp functions","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autogenerate cpp details documentation — details_cpp","text":"","code":"details_cpp()"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_intensity_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Autogenerated documentation for intensity code — details_intensity_code","title":"Autogenerated documentation for intensity code — details_intensity_code","text":"Autogenerated documentation intensity code","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_intensity_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autogenerated documentation for intensity code — details_intensity_code","text":"","code":"details_intensity_code()"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_interaction_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Autogenerated documentation for interaction code — details_interaction_code","title":"Autogenerated documentation for interaction code — details_interaction_code","text":"Autogenerated documentation interaction code","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_interaction_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autogenerated documentation for interaction code — details_interaction_code","text":"","code":"details_interaction_code()"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_kernel_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Autogenerated documentation for kernel code — details_kernel_code","title":"Autogenerated documentation for kernel code — details_kernel_code","text":"Autogenerated documentation kernel code","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_kernel_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autogenerated documentation for kernel code — details_kernel_code","text":"","code":"details_kernel_code()"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_type_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Autogenerated documentation for event type — details_type_event","title":"Autogenerated documentation for event type — details_type_event","text":"Autogenerated documentation event type","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/details_type_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autogenerated documentation for event type — details_type_event","text":"","code":"details_type_event()"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/exposure_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposure table — exposure_table","title":"Exposure table — exposure_table","text":"Returns Central Exposure--Risk given ages groups time period. central Exposure--risk computed sum time spent individuals given age group given period, age age last birthday.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/exposure_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposure table — exposure_table","text":"","code":"exposure_table(pop, ages, period)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/exposure_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exposure table — exposure_table","text":"pop Object class population. ages vector size N composed age groups. period vector size M composed time intervals.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/exposure_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exposure table — exposure_table","text":"exposure matrix","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/exposure_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exposure table — exposure_table","text":"function computes central exposure--risk time interval [t[j],t[j+1]), j=1..M, age groups.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/exposure_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exposure table — exposure_table","text":"","code":"ex_table <- exposure_table(population(EW_pop_out),0:101,0:11)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_Ctype.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — get_Ctype","title":"Function for internal use — get_Ctype","text":"Get C++ type parameter.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_Ctype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — get_Ctype","text":"","code":"get_Ctype(x)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_Rtype.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — get_Rtype","title":"Function for internal use — get_Rtype","text":"Get R type parameter.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_Rtype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — get_Rtype","text":"","code":"get_Rtype(x)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for get_characteristics — get_characteristics","title":"Generic method for get_characteristics — get_characteristics","text":"Generic method get_characteristics","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for get_characteristics — get_characteristics","text":"","code":"get_characteristics(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for get_characteristics — get_characteristics","text":"object object. ... Additional parameters.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns names and C types of the characteristics. — get_characteristics.population","title":"Returns names and C types of the characteristics. — get_characteristics.population","text":"Returns names C types characteristics (birth death) individuals population, population data frame.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns names and C types of the characteristics. — get_characteristics.population","text":"","code":"# S3 method for class 'population' get_characteristics(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns names and C types of the characteristics. — get_characteristics.population","text":"object Object population class representing population. ... additional arguments.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns names and C types of the characteristics. — get_characteristics.population","text":"Named vector composed characteristics names C types. population characteristics, means birth death columns, returns NULL.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/get_characteristics.population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns names and C types of the characteristics. — get_characteristics.population","text":"","code":"get_characteristics(population(EW_pop_14$sample)) #>   male  #> \"bool\""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/gompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Gompertz–Makeham intensity function. — gompertz","title":"Gompertz–Makeham intensity function. — gompertz","text":"intensity function (hazard function) Gompertz-Makeham law mortality distribution defined $$h(x) = \\alpha e^{\\beta x} + \\lambda$$ \\(\\alpha, \\beta, \\lambda \\{R}_+\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/gompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gompertz–Makeham intensity function. — gompertz","text":"","code":"gompertz(alpha, beta, lambda = 0)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/gompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gompertz–Makeham intensity function. — gompertz","text":"alpha Non-negative real parameter. beta Non-negative real parameter. lambda Non-negative real parameter.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/gompertz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gompertz–Makeham intensity function. — gompertz","text":"Function associates x \\(\\alpha exp(\\beta x) + \\lambda\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/gompertz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gompertz–Makeham intensity function. — gompertz","text":"C++ version function available. See vignette('IBMPopSim_cpp') details.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/has_event_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for a given string in event types — has_event_type","title":"Search for a given string in event types — has_event_type","text":"Search given string event types","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/has_event_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for a given string in event types — has_event_type","text":"","code":"has_event_type(events, str)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/has_event_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for a given string in event types — has_event_type","text":"events list events str string search","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/has_event_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for a given string in event types — has_event_type","text":"boolean","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/id_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete a population id — id_complete","title":"Complete a population id — id_complete","text":"population id column, verifies NA id values, , completes missing ids","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/id_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete a population id — id_complete","text":"","code":"id_complete(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/id_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete a population id — id_complete","text":"object data frame containing least column birth death, converted population class.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/linfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear interpolation function. — linfun","title":"Linear interpolation function. — linfun","text":"Return function performing linear interpolation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/linfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear interpolation function. — linfun","text":"","code":"linfun(x, y, yleft = y[1], yright = y[length(y)])"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/linfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear interpolation function. — linfun","text":"x, y Numeric vectors giving coordinates points interpolated. yleft value returned input x values less min(x). yright value returned input x values greater max(x).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/linfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear interpolation function. — linfun","text":"Objet class linfun function approxfun function method = 'linear'.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/linfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear interpolation function. — linfun","text":"C++ version function available. See vignette('IBMPopSim_cpp') details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/max.stepfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the maximum of a function of class stepfun. — max.stepfun","title":"Returns the maximum of a function of class stepfun. — max.stepfun","text":"Returns maximum function class stepfun.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/max.stepfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the maximum of a function of class stepfun. — max.stepfun","text":"","code":"# S3 method for class 'stepfun' max(..., na.rm = FALSE)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/max.stepfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the maximum of a function of class stepfun. — max.stepfun","text":"... argument class stepfun na.rm logical indicating whether missing values removed","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/max.stepfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the maximum of a function of class stepfun. — max.stepfun","text":"maximum step function.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/merge_pop_withid.html","id":null,"dir":"Reference","previous_headings":"","what":"A function returning a merged dataframe from a list of population dataframes with id. — merge_pop_withid","title":"A function returning a merged dataframe from a list of population dataframes with id. — merge_pop_withid","text":"function returning merged dataframe list population dataframes id.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/merge_pop_withid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function returning a merged dataframe from a list of population dataframes with id. — merge_pop_withid","text":"","code":"merge_pop_withid(pop_df_list, chars_tracked = NULL)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/merge_pop_withid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function returning a merged dataframe from a list of population dataframes with id. — merge_pop_withid","text":"pop_df_list list population dataframe first three columns dataframe id, birth death. chars_tracked vector characteristics tracked time.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/merge_pop_withid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function returning a merged dataframe from a list of population dataframes with id. — merge_pop_withid","text":"dataframe composed individuals characteristics simulation time.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating an event with intensity of class individual — mk_event_individual","title":"Creating an event with intensity of class individual — mk_event_individual","text":"Creates event intensity class individual (without interactions). event occurs, something happens individual population. created event must used mk_model.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating an event with intensity of class individual — mk_event_individual","text":"","code":"mk_event_individual(type, name, intensity_code, kernel_code = \"\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating an event with intensity of class individual — mk_event_individual","text":"type Must one 'birth', 'death', 'entry', 'exit', 'swap' 'custom'. See details. name (Optional) specified, name given event type. intensity_code String containing C++ code describing intensity function. See details. kernel_code String containing C++ code describing event action. Optional 'birth', 'death' 'exit' events. See details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating an event with intensity of class individual — mk_event_individual","text":"S3 object class event type individual.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_individual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating an event with intensity of class individual — mk_event_individual","text":"type argument one following 'birth' default, new individual newI created, characteristics parent birth date equal current time. Optional code can precised kernel_code. 'death' default, individual dies. Optional code can precised kernel_code. 'entry' new individual newI added population, characteristics defined user entry kernel_code. 'exit' individual exits population. Optional code can precised kernel_code. 'swap' user can change characteristics selected individual . requires kernel_code. 'custom' None types, user defines kernel_code can act selected individual population pop. intensity_code argument string containing C++ code describing event intensity individual time t. intensity value must stored variable result. available variables C++ code : t (current time), (current individual selected event), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim_Cpp') details. kernel_code argument string containing C++ code describing action event. available variables C++ code : t (current time), pop (current population), (current individual selected event), newI (new individual 'birth' 'entry' event), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim') details.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_individual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating an event with intensity of class individual — mk_event_individual","text":"","code":"params <- list(\"p_male\"= 0.51,               \"birth_rate\" = stepfun(c(15,40), c(0,0.05,0)),               \"death_rate\" = gompertz(0.008, 0.02))  death_event <- mk_event_individual(type = \"death\",                 name = \"my_death_event\",                 intensity_code = \"result = death_rate(age(I,t));\")  birth_event <- mk_event_individual(type = \"birth\",                 intensity_code = \"if (I.male) result = 0;                                   else result = birth_rate(age(I,t));\",                 kernel_code = \"newI.male = CUnif(0, 1) < p_male;\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_inhomogeneous_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating inhomogeneous Poisson class event — mk_event_inhomogeneous_poisson","title":"Creating inhomogeneous Poisson class event — mk_event_inhomogeneous_poisson","text":"function mk_event_inhomogeneous_poisson used create event intensity type inhomogeneous Poisson (time dependent intensity depend population). event occurs, something happens population. created event must used mk_model.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_inhomogeneous_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating inhomogeneous Poisson class event — mk_event_inhomogeneous_poisson","text":"","code":"mk_event_inhomogeneous_poisson(type, name, intensity_code, kernel_code = \"\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_inhomogeneous_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating inhomogeneous Poisson class event — mk_event_inhomogeneous_poisson","text":"type Must one 'birth', 'death', 'entry', 'exit', 'swap' 'custom'. See details. name (Optional) specified, name given event type. intensity_code String containing C++ code describing intensity function. See details. kernel_code String containing C++ code describing event action. Optional 'birth', 'death' 'exit' events. See details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_inhomogeneous_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating inhomogeneous Poisson class event — mk_event_inhomogeneous_poisson","text":"S3 object class event type inhomogeneous Poisson.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_inhomogeneous_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating inhomogeneous Poisson class event — mk_event_inhomogeneous_poisson","text":"type argument one following 'birth' default, new individual newI created, characteristics parent birth date equal current time. Optional code can precised kernel_code. 'death' default, individual dies. Optional code can precised kernel_code. 'entry' new individual newI added population, characteristics defined user entry kernel_code. 'exit' individual exits population. Optional code can precised kernel_code. 'swap' user can change characteristics selected individual . requires kernel_code. 'custom' None types, user defines kernel_code can act selected individual population pop. intensity_code argument string containing C++ code describing event intensity individual time t. intensity value must stored variable result. available variables C++ code : t (current time), (current individual selected event), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim_Cpp') details. kernel_code argument string containing C++ code describing action event. available variables C++ code : t (current time), pop (current population), (current individual selected event), newI (new individual 'birth' 'entry' event), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim') details.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating an event with intensity of type interaction — mk_event_interaction","title":"Creating an event with intensity of type interaction — mk_event_interaction","text":"Creates event whose intensity depends individual interactions population. event occurs, something happens individual population. intensity event can depend time, characteristics individuals population, can written $$d(,t,pop) = \\sum_{J \\pop} U(,J,t),$$ \\(U\\) called interaction function. created event must used mk_model.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating an event with intensity of type interaction — mk_event_interaction","text":"","code":"mk_event_interaction(   type,   name,   interaction_code,   kernel_code = \"\",   interaction_type = \"random\" )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating an event with intensity of type interaction — mk_event_interaction","text":"type Must one 'birth', 'death', 'entry', 'exit', 'swap' 'custom'. See details. name (Optional) specified, name given event type. interaction_code String containing C++ code describing interaction function. See details. kernel_code String containing C++ code describing event action. Optional 'birth', 'death' 'exit' events. See details. interaction_type (Optional) Either 'random' 'full'. default 'random' faster 'full'.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating an event with intensity of type interaction — mk_event_interaction","text":"S3 object class event type interaction.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_interaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating an event with intensity of type interaction — mk_event_interaction","text":"type argument one following 'birth' default, new individual newI created, characteristics parent birth date equal current time. Optional code can precised kernel_code. 'death' default, individual dies. Optional code can precised kernel_code. 'entry' new individual newI added population, characteristics defined user entry kernel_code. 'exit' individual exits population. Optional code can precised kernel_code. 'swap' user can change characteristics selected individual . requires kernel_code. 'custom' None types, user defines kernel_code can act selected individual population pop. interaction_code argument string containing C++ code describing event interaction function $U$ time t. interaction value must stored variable result. available variables C++ code : t (current time), (current individual selected event), J (another individual interaction_type 'random'), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim_Cpp') details. kernel_code argument string containing C++ code describing action event. available variables C++ code : t (current time), pop (current population), (current individual selected event), newI (new individual 'birth' 'entry' event), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim') details.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating an event with intensity of type interaction — mk_event_interaction","text":"","code":"death_interaction_code<- \" result = max(J.size -I.size,0);\" event <- mk_event_interaction(type=\"death\",                              interaction_code = death_interaction_code)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Poisson class event — mk_event_poisson","title":"Creating Poisson class event — mk_event_poisson","text":"function mk_event_poisson used create event intensity type Poisson (constant intensity depend population time). event occurs, something happens population. created event must used mk_model.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Poisson class event — mk_event_poisson","text":"","code":"mk_event_poisson(type, name, intensity, kernel_code = \"\")"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Poisson class event — mk_event_poisson","text":"type Must one 'birth', 'death', 'entry', 'exit', 'swap' 'custom'. See details. name (Optional) specified, name given event type. intensity String containing constant positive value, name parameter constant positive value. kernel_code String containing C++ code describing event action. Optional 'birth', 'death' 'exit' events. See details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Poisson class event — mk_event_poisson","text":"S3 object class event type Poisson.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating Poisson class event — mk_event_poisson","text":"type argument one following 'birth' default, new individual newI created, characteristics parent birth date equal current time. Optional code can precised kernel_code. 'death' default, individual dies. Optional code can precised kernel_code. 'entry' new individual newI added population, characteristics defined user entry kernel_code. 'exit' individual exits population. Optional code can precised kernel_code. 'swap' user can change characteristics selected individual . requires kernel_code. 'custom' None types, user defines kernel_code can act selected individual population pop. kernel_code argument string containing C++ code describing action event. available variables C++ code : t (current time), pop (current population), (current individual selected event), newI (new individual 'birth' 'entry' event), name model parameters (variables, functions, see mk_model). See vignette('IBMPopSim') details.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_event_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating Poisson class event — mk_event_poisson","text":"","code":"birth <- mk_event_poisson('birth', intensity = 10)  # \\donttest{ params <- list(beta = 10) death <- mk_event_poisson('death', intensity = 'beta') # name of one parameter mk_model(events = list(birth, death), parameters = params) #> Events: #> #1: poisson event of type birth #> #2: poisson event of type death #> ---------------------------------------  #> Individual description: #> names:  birth death  #> R types:  double double  #> C types:  double double  #> ---------------------------------------  #> R parameters available in C++ code: #> names:  beta  #> R types:  double  #> C types:  double  # }"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_individual_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mk_individual_type","title":"Function for internal use — mk_individual_type","text":"Get R C++ type characteristics.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_individual_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mk_individual_type","text":"","code":"mk_individual_type(characteristics)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a model for IBMPopSim. — mk_model","title":"Creates a model for IBMPopSim. — mk_model","text":"function creates Individual Based Model describing population, events can occur population, model parameters.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a model for IBMPopSim. — mk_model","text":"","code":"mk_model(   characteristics = NULL,   events,   parameters = NULL,   with_compilation = TRUE )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a model for IBMPopSim. — mk_model","text":"characteristics List containing names types characteristics individuals population. See get_characteristics. events List events model. See mk_event_poisson, mk_event_inhomogeneous_poisson, mk_event_individual, mk_event_interaction. parameters Model parameters. list parameters model. with_compilation (Optional) Logical parameter, TRUE default. FALSE sourceCpp function called.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a model for IBMPopSim. — mk_model","text":"model List containing built model : individual_type: Names types (R C++) characteristics. parameters_types: Names types (R C++) model parameters. events: List events. cpp_code: Output C++ compilation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a model for IBMPopSim. — mk_model","text":"builds C++ model code produces function popsim_cpp used simulating model. function used simulate population model popsim.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a model for IBMPopSim. — mk_model","text":"","code":"# \\donttest{ params <- list(\"p_male\"= 0.51,               \"birth_rate\" = stepfun(c(15,40),c(0,0.05,0)),               \"death_rate\" = gompertz(0.008,0.02))  death_event <- mk_event_individual(type = \"death\",                                   intensity_code = \"result = death_rate(age(I,t));\")  birth_event <- mk_event_individual(type = 'birth',                                   intensity_code = \"if (I.male) result = 0;                                     else result=birth_rate(age(I,t));\",                                   kernel_code = \"newI.male = CUnif(0, 1) < p_male;\")  model <- mk_model(characteristics = get_characteristics(population(EW_pop_14$sample)),                  events = list(death_event,birth_event),                  parameters = params)  summary(model) #> Events description: #> [[1]]\t #> Event class : individual  #> Event type : death  #> Event name : death #> Intensity code : 'result = death_rate(age(I,t));'  #> Kernel code : ''  #> [[2]]\t #> Event class : individual  #> Event type : birth  #> Event name : birth #> Intensity code : 'if (I.male) result = 0; #>                                     else result=birth_rate(age(I,t));'  #> Kernel code : 'newI.male = CUnif(0, 1) < p_male;'  #>  #> ---------------------------------------  #> Individual description: #> names:  birth death male  #> R types:  double double logical  #> C types:  double double bool  #> ---------------------------------------  #> R parameters available in C++ code: #> names:  p_male birth_rate death_rate  #> R types:  double closure closure  #> C types:  double function_x function_x  # }"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_parameters_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract types (R and C++) of the parameters — mk_parameters_types","title":"Extract types (R and C++) of the parameters — mk_parameters_types","text":"Extract types (R C++) parameters","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_parameters_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract types (R and C++) of the parameters — mk_parameters_types","text":"","code":"mk_parameters_types(parameters)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_parameters_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract types (R and C++) of the parameters — mk_parameters_types","text":"parameters parameters","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mk_parameters_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract types (R and C++) of the parameters — mk_parameters_types","text":"list","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_declaration_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_declaration_individual","title":"Function for internal use — mkcpp_declaration_individual","text":"Build source code individual creation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_declaration_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_declaration_individual","text":"","code":"mkcpp_declaration_individual(ind_t)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_definition_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_definition_events","title":"Function for internal use — mkcpp_definition_events","text":"Build source code event definition.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_definition_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_definition_events","text":"","code":"mkcpp_definition_events(events)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_event","title":"Function for internal use — mkcpp_event","text":"Build source code event creation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_event","text":"","code":"mkcpp_event(event, kernel_type, name_type)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_initialisation_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_initialisation_population","title":"Function for internal use — mkcpp_initialisation_population","text":"Build source code population initialization.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_initialisation_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_initialisation_population","text":"","code":"mkcpp_initialisation_population(ind_t)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_output_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_output_population","title":"Function for internal use — mkcpp_output_population","text":"Build source code output population creation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_output_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_output_population","text":"","code":"mkcpp_output_population(ind_t)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_parameters","title":"Function for internal use — mkcpp_parameters","text":"Build source code parameters creation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_parameters","text":"","code":"mkcpp_parameters(parameters, parameters_t)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_popsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for internal use — mkcpp_popsim","title":"Function for internal use — mkcpp_popsim","text":"Build source main code model simulation.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/mkcpp_popsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for internal use — mkcpp_popsim","text":"","code":"mkcpp_popsim(model, with_id)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise real function. — piecewise_x","title":"Piecewise real function. — piecewise_x","text":"Given vectors (breaks[1],...,breaks[n]) list IBMPopSim compatible functions funs = (f[0],f[1],...,f[n]) (one value !), piecewise_x(breaks, funs) returns function $$f(x) = f_0(x){1}_{x\\le breaks[1]}+\\sum_{k=1}^{n-1} f_k(x) {1}_{[breaks_{k}, breaks_{k+1})}(x) + f_n(x){1}_{x \\ge breaks[n]}$$","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise real function. — piecewise_x","text":"","code":"piecewise_x(breaks, funs)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise real function. — piecewise_x","text":"breaks Numeric vector giving breaks functions given funs. Must sorted unique values. funs List functions.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise real function. — piecewise_x","text":"Piecewise function built given intervals functions.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Piecewise real function. — piecewise_x","text":"C++ version function available. See vignette('IBMPopSim_cpp') details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise real function. — piecewise_x","text":"","code":"dr <- with(EW_pop_14$rates,            stepfun(x=death_male[,\"age\"], y=c(0,death_male[,\"value\"]))) # before age 80 the stepfun and after age 80 the gompertz function f <- piecewise_x(80, list(dr, gompertz(0.00006, 0.085))) x <- seq(40:120) plot(x, sapply(x, f))"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise real function of two variables. — piecewise_xy","title":"Piecewise real function of two variables. — piecewise_xy","text":"Given vectors (breaks[1],...,breaks[n]) list IBMPopSim compatible functions funs = (f[0],f[1],...,f[n]) (one value !), piecewise_xy(breaks, funs) returns function $$f(x,y) = f_0(x) {1}_{y\\le breaks[1]}+\\sum_{k=1}^{n-1} f_k(x) {1}_{[breaks_{k}, breaks_{k+1})}(y) + f_n(x){1}_{y \\ge breaks[n]}$$","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise real function of two variables. — piecewise_xy","text":"","code":"piecewise_xy(breaks, funs)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise real function of two variables. — piecewise_xy","text":"breaks Numeric vector giving breaks functions given funs. Must sorted unique values. funs List functions.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise real function of two variables. — piecewise_xy","text":"Piecewise bivariate function built given intervals functions.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_xy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Piecewise real function of two variables. — piecewise_xy","text":"C++ version function available. See vignette('IBMPopSim_cpp') details.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/piecewise_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise real function of two variables. — piecewise_xy","text":"","code":"time_dep_function <- piecewise_xy(c(5),                                   list(gompertz(0.1, 0.005), gompertz(0.08, 0.005))) time_dep_function(0, 65)  # death intensity at time 0 and age 65. #> [1] 0.1384031"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the age pyramid of a population data frame (at a given time). — plot.population","title":"Plot the age pyramid of a population data frame (at a given time). — plot.population","text":"Plot age pyramid age pyramid data frame possibly several characteristics.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the age pyramid of a population data frame (at a given time). — plot.population","text":"","code":"# S3 method for class 'population' plot(   x,   group_colors = NULL,   group_legend = \"Group\",   age_breaks = NULL,   value_breaks = NULL,   ... )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the age pyramid of a population data frame (at a given time). — plot.population","text":"x Object class population. group_colors (Optional) Named character vector. group_legend (Optional) Legend title name. default set \"Group\". age_breaks (Optional) ordered vector indexes vector unique(pyr$age) used breaks axis ages. value_breaks (Optional) Breaks axis values. ... Additional arguments","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the age pyramid of a population data frame (at a given time). — plot.population","text":"Plot age pyramid.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the age pyramid of a population data frame (at a given time). — plot.population","text":"","code":"plot(population(EW_pop_14$sample), time = 0)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an age pyramid. — plot.pyramid","title":"Plot an age pyramid. — plot.pyramid","text":"Plot age pyramid age pyramid data frame possibly several characteristics.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an age pyramid. — plot.pyramid","text":"","code":"# S3 method for class 'pyramid' plot(   x,   group_colors = NULL,   group_legend = \"Group\",   age_breaks = NULL,   value_breaks = NULL,   ... )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an age pyramid. — plot.pyramid","text":"x Object class pyramid. (Optional) plotting age pyramid composed several subgroups, population data frame must contain column named group_name. group_colors (Optional) Named character vector. group_legend (Optional) Legend title name. default set \"Group\". age_breaks (Optional) ordered vector indexes vector unique(pyr$age) used breaks axis ages. value_breaks (Optional) Breaks axis values. ... Additional parameters","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an age pyramid. — plot.pyramid","text":"Plot age pyramid.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/plot.pyramid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an age pyramid. — plot.pyramid","text":"","code":"plot.pyramid(subset(pyramid(EW_pop_14$age_pyramid), as.numeric(age) <= 110))   # \\donttest{ library(colorspace) pyr_IMD <- subset(pyramid(EW_popIMD_14$age_pyramid), as.numeric(age) <= 110) pyr_IMD$group_name <- with(pyr_IMD, ifelse(male, paste('Males - IMD', IMD),                           paste('Females - IMD', IMD))) colors <- c(sequential_hcl(n=5, palette = \"Magenta\"),             sequential_hcl(n=5, palette = \"Teal\")) names(colors) <- c(paste('Females - IMD', 1:5),                    paste('Males - IMD', 1:5)) # note that you must have setequal(names(colors), pyr_IMD$group_name) is TRUE plot.pyramid(pyr_IMD, colors)   # age pyramids at different times library(gganimate) #> Loading required package: ggplot2 pyrs = age_pyramids(population(EW_popIMD_14$sample), time = 1:10) plot.pyramid(pyrs) + transition_time(time) + labs(title = \"Time: {frame_time}\") # }"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for popsample — popsample","title":"Generic method for popsample — popsample","text":"Generic method popsample","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for popsample — popsample","text":"","code":"popsample(age_pyramid, size, age_max = 120, time = 0)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for popsample — popsample","text":"age_pyramid Age pyramid. size non-negative integer giving number individuals population. age_max (Optional) non-negative numeric replace (exists) Inf age_pyramid.population. time (Optional) age pyramid computed instant time. Must numeric greater equal 0.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for popsample — popsample","text":"Object population class representing data frame size size containing population individuals.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a population from an age pyramid (at a given time). — popsample.pyramid","title":"Sample a population from an age pyramid (at a given time). — popsample.pyramid","text":"Sample population age pyramid (given time).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a population from an age pyramid (at a given time). — popsample.pyramid","text":"","code":"# S3 method for class 'pyramid' popsample(age_pyramid, size, age_max = 120, time = 0)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a population from an age pyramid (at a given time). — popsample.pyramid","text":"age_pyramid Object pyramid class. size non-negative integer giving number individuals population. age_max (Optional) non-negative numeric replace (exists) Inf age_pyramid.population. time (Optional) age pyramid computed instant time. Must numeric greater equal 0.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a population from an age pyramid (at a given time). — popsample.pyramid","text":"Object population class representing data frame size size containing population individuals.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsample.pyramid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a population from an age pyramid (at a given time). — popsample.pyramid","text":"","code":"pop_sample_1e4 <- popsample(pyramid(EW_pop_14$age_pyramid), size = 1e4)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a model. — popsim","title":"Simulation of a model. — popsim","text":"function simulates random evolution IBM.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a model. — popsim","text":"","code":"popsim(   model,   initial_population,   events_bounds,   parameters = NULL,   age_max = Inf,   time,   multithreading = FALSE,   num_threads = NULL,   clean_step = NULL,   clean_ratio = 0.1,   seed = NULL,   verbose = FALSE )"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a model. — popsim","text":"model Model resulting call function mk_model. initial_population Object population class representing initial population. events_bounds Named vector events bounds, names corresponding events names. parameters List model parameters. age_max Maximum age individuals population (Inf default). time Final time (Numeric). Can length 1 vector simulation discretized times. multithreading Logical multithread activation, FALSE default. activated IBM simulation interactions. num_threads (Optional) Number threads used multithreading. Set default number concurrent threads supported available hardware implementation. clean_step (Optional) Optional parameter improving simulation time. Time step removing dead (exited) individuals population. default, equal age_max. clean_ratio (Optional) Optional parameter improving simulation time. 0.1 default. seed (Optional) Random generator seed, random default. verbose (Optional) Activate verbose output, FALSE default.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a model. — popsim","text":"List composed arguments Simulation inputs (initial population, parameters value, multithreading...) logs Simulation logs (algorithm duration, accepted/rejected events...). population time length 1, population object type population containing individuals lived population time interval [0,time]. time vector (time[1], ..., time[n]), population list n objects type population, representing state population time time[], = 1,..., n.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/popsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a model. — popsim","text":"","code":"# \\donttest{ init_size <- 100000 pop_df <- data.frame(birth = rep(0, init_size), death = NA) pop <- population(pop_df)  birth = mk_event_poisson(type = 'birth', intensity = 'lambda') death = mk_event_poisson(type = 'death', intensity = 'mu') params = list('lambda' = 100, 'mu' = 100) birth_death <- mk_model(events = list(birth, death),                        parameters = params)  sim_out <- popsim(model = birth_death,                  initial_population = pop,                  events_bounds = c('birth' = params$lambda, 'death' = params$mu),                  parameters = params,                  time = 10)                        # }"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population.html","id":null,"dir":"Reference","previous_headings":"","what":"Class population — population","title":"Class population — population","text":"Data frame containing population, least birth death column, eventually characteristics","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class population — population","text":"","code":"population(x, entry = FALSE, out = FALSE, id = FALSE)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class population — population","text":"x Data frame list data frames, containing least birth death column entry Boolean flag. default set FALSE. set TRUE population must contain column numerical values named \"entry\", column exist column named \"entry\" added data frame values set NA. Boolean flag. default set FALSE. set TRUE population must contain column boolean values named \"\", column exist column named \"\" added data frame values set FALSE. id Boolean flag. default set FALSE. set TRUE population must contain column integer distinct values named \"id\". column exist column named \"id\" added data frame values seq(1, nrow(x)).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class population — population","text":"Given data frame augmented \"population\" class. list data frames given, column names contain string \"id\" list corresponds evolution population different times. constructor returns last population observed list (corresponding final state population).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic method for population_alive — population_alive","title":"Generic method for population_alive — population_alive","text":"Generic method population_alive","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic method for population_alive — population_alive","text":"","code":"population_alive(object, t, a1 = 0, a2 = Inf, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic method for population_alive — population_alive","text":"object population. t numeric indicating time alive individuals observed. a1 0 default. Lower bound age. a2 Inf default. Upper bound age. ... Additional params.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic method for population_alive — population_alive","text":"individuals alive time t age [a1,a2).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a population of individuals alive. — population_alive.population","title":"Returns a population of individuals alive. — population_alive.population","text":"Returns population individuals alive.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a population of individuals alive. — population_alive.population","text":"","code":"# S3 method for class 'population' population_alive(object, t, a1 = 0, a2 = Inf, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a population of individuals alive. — population_alive.population","text":"object population data frame containing least column birth death. t numeric indicating time. a1 0 default. individuals age a1 t selected. a2 Inf default. individuals age a2 t selected. ... Additional params.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/population_alive.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a population of individuals alive. — population_alive.population","text":"function returns population data frame containing individuals alive time t age [a1,a2).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.event.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Event — print.event","title":"Print Event — print.event","text":"print method class \"event\" giving short description event.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Event — print.event","text":"","code":"# S3 method for class 'event' print(x, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Event — print.event","text":"x Argument class event. ... Additional arguments affecting summary produced.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing of a model — print.model","title":"Printing of a model — print.model","text":"print method class model.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing of a model — print.model","text":"","code":"# S3 method for class 'model' print(x, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing of a model — print.model","text":"x argument class model ... additional arguments affecting summary produced.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing population — print.population","title":"Printing population — print.population","text":"Print population","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing population — print.population","text":"","code":"# S3 method for class 'population' print(x, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing population — print.population","text":"x Object population class representing population. ... Additional arguments","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/print.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing population — print.population","text":"Print population","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Class pyramid — pyramid","title":"Class pyramid — pyramid","text":"Data frame containing age pyramid, least age value column, eventually characteristics. male column present, must logical vector, group column present, must vector type character.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class pyramid — pyramid","text":"","code":"pyramid(x)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class pyramid — pyramid","text":"x Data frame, containing least age value column","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class pyramid — pyramid","text":"Given data frame augmented \"age_pyramid\" class.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/stepfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Step Function. — stepfun","title":"Step Function. — stepfun","text":"Given vectors (x[1],...,x[n]) (y[0],y[1],...,y[n]) (one value !), stepfun(x, y) returns interpolating step function, say f_n. cadlag version (right = FALSE) stepfun function package stats. step function value f_n(t) equals constant y[k-1] t [x[k-1], x[k]) $$f_n(t) = \\sum_{k=1}^{n+1} y_{k-1} {1}_{[x_{k-1}, x_{k})}(t),$$ \\(x_0=-\\infty\\) \\(x_{n+1}=+\\infty\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/stepfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step Function. — stepfun","text":"","code":"stepfun(x, y)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/stepfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step Function. — stepfun","text":"x Numeric vector giving knots jump locations step function. Must sorted unique values. y Numeric vector one longer x, giving heights function values cx values.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/stepfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Step Function. — stepfun","text":"Objet class stepfun option right = FALSE (cadlag function).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/stepfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Step Function. — stepfun","text":"function defined documentation purposes . See stepfun approxfun. C++ version function available. See vignette('IBMPopSim_cpp') details.","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.event.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing an event — summary.event","title":"Summarizing an event — summary.event","text":"summary method class event giving detailed description event.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing an event — summary.event","text":"","code":"# S3 method for class 'event' summary(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing an event — summary.event","text":"object Argument class event. ... Additional arguments affecting summary produced.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary logs — summary.logs","title":"Summary logs — summary.logs","text":"Summary logs simulation","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary logs — summary.logs","text":"","code":"# S3 method for class 'logs' summary(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary logs — summary.logs","text":"object Logs output call popsim function ... Additional arguments affecting summary produced","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary logs — summary.logs","text":"Print column names number individuals","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a model — summary.model","title":"Summary of a model — summary.model","text":"summary method class model.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a model — summary.model","text":"","code":"# S3 method for class 'model' summary(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a model — summary.model","text":"object argument class model ... additional arguments affecting summary produced.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.population.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary population — summary.population","title":"Summary population — summary.population","text":"Summary population column names number individuals","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary population — summary.population","text":"","code":"# S3 method for class 'population' summary(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary population — summary.population","text":"object Object population class representing population. ... Additional arguments affecting summary produced","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary population — summary.population","text":"Print column names number individuals","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.simulation_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary simulation output — summary.simulation_output","title":"Summary simulation output — summary.simulation_output","text":"Summary simulation output","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.simulation_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary simulation output — summary.simulation_output","text":"","code":"# S3 method for class 'simulation_output' summary(object, ...)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.simulation_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary simulation output — summary.simulation_output","text":"object Output call popsim function ... Additional arguments affecting summary produced","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/summary.simulation_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary simulation output — summary.simulation_output","text":"Summary population(s) logs","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/toy_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy parameters for IBMPopSim-human_popIMD vignette example. — toy_params","title":"Toy parameters for IBMPopSim-human_popIMD vignette example. — toy_params","text":"Toy parameters IBMPopSim-human_popIMD vignette example.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/toy_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy parameters for IBMPopSim-human_popIMD vignette example. — toy_params","text":"","code":"toy_params"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/toy_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy parameters for IBMPopSim-human_popIMD vignette example. — toy_params","text":"list containing: birth list 3 numeric vectors  (alpha, beta, TFR_weights) creating birth intensity Weibull probability density function. swap List one numeric vector two data frames  (ages, intensities distribution) creating swap intensity kernel functions.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull function. — weibull","title":"Weibull function. — weibull","text":"Weibull (density) function defined $$h(x) = \\bigl(\\frac{k}{\\lambda}\\bigr) {\\bigl( \\frac{x}{\\lambda} \\bigr)}^{k-1} e^{-(x/\\lambda)^k}$$ \\(k, \\lambda \\(0, +\\infty)\\).","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull function. — weibull","text":"","code":"weibull(k, lambda = 1)"},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull function. — weibull","text":"k Shape parameter, positive real number. lambda Scale parameter, positive real number, defaults 1.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull function. — weibull","text":"Weibull density function dweibull shape parameter k scale parameter lambda, see dweibull.","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/reference/weibull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weibull function. — weibull","text":"C++ version function available. See vignette('IBMPopSim_cpp') details.","code":""},{"path":[]},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"IBMPopSim 1.1.0","text":"Stop simulation population extinct, unless entry events Remove const pop intensity function template. intensity function can modify population individual. Change name roxygen directives file, package documentation available command line","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"minor-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"IBMPopSim 1.1.0","text":"Remove dependency demography insurance portfolio vignette","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"ibmpopsim-100","dir":"Changelog","previous_headings":"","what":"IBMPopSim 1.0.0","title":"IBMPopSim 1.0.0","text":"CRAN release: 2024-02-08","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"IBMPopSim 1.0.0","text":"Introduce classes methods data structures returned main functions : population, pyramid, logs, simulation_output Functions ‘population’ argument now methods ‘population’ class Return prompts begging line Changed argument ‘population’ ‘initial_population’ call main function ‘popsim’, initial_population shall inherit ‘population’ class Add compatibility functions check compatibility given model population characteristics events Replace ‘with_id’ flag ‘mk_model’ fct search ‘id’ among individual type names","code":""},{"path":[]},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"bug-fixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"IBMPopSim 0.4.4","text":"Set arguments ‘popsim’ function available levels R environment","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"new-features-0-4-4","dir":"Changelog","previous_headings":"","what":"New features","title":"IBMPopSim 0.4.4","text":"Add verbose flag pop_sim function Vignettes update","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"ibmpopsim-043","dir":"Changelog","previous_headings":"","what":"IBMPopSim 0.4.3","title":"IBMPopSim 0.4.3","text":"CRAN release: 2023-01-07","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"bug-fixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"IBMPopSim 0.4.3","text":"Add figures interaction vignette Fix run test mk_model plot_pyramid functions Add reserved names characteristics parameters : , J, t, pop, newI, id, entry, Hide plot commands vignettes Add default value “” column entry events Add default value “entry” column birth event Add characteristics tracking merge_pop_withid","code":""},{"path":"https://daphnegiorgi.github.io/IBMPopSim/news/index.html","id":"new-features-0-4-3","dir":"Changelog","previous_headings":"","what":"New features","title":"IBMPopSim 0.4.3","text":"Convert exposure_table death_table Rcpp speed Reduce dependencies","code":""}]
